POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "GetUserStorageNode",
  "query": "query GetUserStorageNode($nodePath: String!) { userStorageNode(nodePath: $nodePath) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "nodePath": "d1"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "GetUserStorageDirDirDescendants",
  "query": "query GetUserStorageDirDirDescendants($dirPath: String, $options: GetStorageOptionsInput) { userStorageDirDescendants(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "dirPath": "d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "GetUserStorageDescendants",
  "query": "query GetUserStorageDescendants($dirPath: String, $options: GetStorageOptionsInput) { userStorageDescendants(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "dirPath": "d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "GetUserStorageDirChildren",
  "query": "query GetUserStorageDirChildren($dirPath: String, $options: GetStorageOptionsInput) { userStorageDirChildren(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "dirPath": "d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "GetUserStorageChildren",
  "query": "query GetUserStorageChildren($dirPath: String, $options: GetStorageOptionsInput) { userStorageChildren(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "dirPath": "d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "HandleUploadedUserFiles",
  "query": "mutation HandleUploadedUserFiles($filePaths: [String!]!) { handleUploadedUserFiles(filePaths: $filePaths) }",
  "variables": {
    "filePaths": ["d1/fileA.txt"]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "CreateUserStorageDirs",
  "query": "mutation CreateUserStorageDirs($dirPaths: [String!]!) { createUserStorageDirs(dirPaths: $dirPaths) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "dirPaths": [
      "d1/d11",
      "d1/d11/d111",
      "d1/d11/d112",
      "dir2/dir2_1"
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "RemoveUserStorageDirs",
  "query": "mutation RemoveUserStorageDirs($dirPaths: [String!]!) { removeUserStorageDirs(dirPaths: $dirPaths) }",
  "variables": {
    "dirPaths": ["d1"]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "RemoveUserStorageFiles",
  "query": "mutation RemoveUserStorageFiles($filePaths: [String!]!) { removeUserStorageFiles(filePaths: $filePaths) }",
  "variables": {
    "filePaths": [
      "d1/d11/fileA.txt"
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "MoveUserStorageDir",
  "query": "mutation MoveUserStorageDir($fromDirPath: String!, $toDirPath: String!) { moveUserStorageDir(fromDirPath: $fromDirPath, toDirPath: $toDirPath) }",
  "variables": {
    "fromDirPath": "d1/d11",
    "toDirPath": "d1/d1X"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "MoveUserStorageFile",
  "query": "mutation MoveUserStorageFile($fromFilePath: String!, $toFilePath: String!) { moveUserStorageFile(fromFilePath: $fromFilePath, toFilePath: $toFilePath) }",
  "variables": {
    "fromFilePath": "d1/fileA.txt",
    "toFilePath": "d1/d11/fileA.txt"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "RenameUserStorageDir",
  "query": "mutation RenameUserStorageDir($dirPath: String!, $newName: String!) { renameUserStorageDir(dirPath: $dirPath, newName: $newName) }",
  "variables": {
    "dirPath": "d1/d11",
    "newName": "d1X"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "RenameUserStorageFile",
  "query": "mutation RenameUserStorageFile($filePath: String!, $newName: String!) { renameUserStorageFile(filePath: $filePath, newName: $newName) }",
  "variables": {
    "filePath": "d1/fileA.txt",
    "newName": "fileB.txt"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "SetUserStorageDirShareSettings",
  "query": "mutation SetUserStorageDirShareSettings($dirPath: String!, $settings: StorageNodeShareSettingsInput!) { setUserStorageDirShareSettings(dirPath: $dirPath, settings: $settings) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "dirPath": "d1",
    "settings": { "isPublic": true, "uids": ["ichiro"] }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "general.user", "myDirName": "general.user"}

{
  "operationName": "SetUserStorageFileShareSettings",
  "query": "mutation SetUserStorageFileShareSettings($filePath: String!, $settings: StorageNodeShareSettingsInput!) { setUserStorageFileShareSettings(filePath: $filePath, settings: $settings) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "filePath": "d1/fileA.txt",
    "settings": { "isPublic": true, "uids": ["ichiro"] }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "GetSignedUploadUrls",
  "query": "query GetSignedUploadUrls($inputs: [SignedUploadUrlInput!]!) { signedUploadUrls(inputs: $inputs) }",
  "variables": {
    "inputs": [
      {
        "filePath": "images/family.png",
        "contentType": "image/png"
      }
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "GetStorageNode",
  "query": "query GetStorageNode($nodePath: String!) { storageNode(nodePath: $nodePath) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "nodePath": "test-files/d1"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "GetStorageDirDescendants",
  "query": "query GetStorageDirDescendants($dirPath: String, $options: GetStorageOptionsInput) { storageDirDescendants(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "nodePath": "test-files/d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "GetStorageDescendants",
  "query": "query GetStorageDescendants($dirPath: String, $options: GetStorageOptionsInput) { storageDescendants(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "nodePath": "test-files/d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "GetStorageDirChildren",
  "query": "query GetStorageDirChildren($dirPath: String, $options: GetStorageOptionsInput) { storageDirChildren(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "nodePath": "test-files/d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "GetStorageChildren",
  "query": "query GetStorageChildren($dirPath: String, $options: GetStorageOptionsInput) { storageChildren(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic uids } created updated } nextPageToken } }",
  "variables": {
    "dirPath": "test-files/d1",
    "options": { "maxResults": 3 }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "HandleUploadedFiles",
  "query": "mutation HandleUploadedFiles($filePaths: [String!]!) { handleUploadedFiles(filePaths: $filePaths) }",
  "variables": {
    "filePaths": ["test-files/d1/fileA.txt"]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "CreateStorageDirs",
  "query": "mutation CreateStorageDirs($dirPaths: [String!]!) { createStorageDirs(dirPaths: $dirPaths) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "dirPaths": [
      "test-files/d1/d11",
      "test-files/d1/d11/d111",
      "test-files/d1/d11/d112",
      "test-files/dir2/dir2_1"
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "RemoveStorageDirs",
  "query": "mutation RemoveStorageDirs($dirPaths: [String!]!) { removeStorageDirs(dirPaths: $dirPaths) }",
  "variables": {
    "dirPaths": ["test-files/d1"]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "RemoveStorageFiles",
  "query": "mutation RemoveStorageFiles($filePaths: [String!]!) { removeStorageFiles(filePaths: $filePaths) }",
  "variables": {
    "filePaths": [
      "test-files/d1/fileA.txt"
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "MoveStorageDir",
  "query": "mutation MoveStorageDir($fromDirPath: String!, $toDirPath: String!) { moveStorageDir(fromDirPath: $fromDirPath, toDirPath: $toDirPath) }",
  "variables": {
    "fromDirPath": "test-files/d1/d11",
    "toDirPath": "test-files/d1/d1X"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "MoveStorageFile",
  "query": "mutation MoveStorageFile($fromFilePath: String!, $toFilePath: String!) { moveStorageFile(fromFilePath: $fromFilePath, toFilePath: $toFilePath) }",
  "variables": {
    "fromFilePath": "test-files/d1/fileA.txt",
    "toFilePath": "test-files/d1/d11/fileA.txt"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "RenameStorageDir",
  "query": "mutation RenameStorageDir($dirPath: String!, $newName: String!) { renameStorageDir(dirPath: $dirPath, newName: $newName) }",
  "variables": {
    "dirPath": "test-files/d1/d11",
    "newName": "d1X"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "RenameStorageFile",
  "query": "mutation RenameStorageFile($filePath: String!, $newName: String!) { renameStorageFile(filePath: $filePath, newName: $newName) }",
  "variables": {
    "filePath": "test-files/d1/fileA.txt",
    "newName": "fileB.txt"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "SetStorageDirShareSettings",
  "query": "mutation SetStorageDirShareSettings($dirPath: String!, $settings: StorageNodeShareSettingsInput!) { setStorageDirShareSettings(dirPath: $dirPath, settings: $settings) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "dirPath": "test-files/d1",
    "settings": { "isPublic": true, "uids": ["ichiro"] }
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin.user", "myDirName": "app.admin.user", "isAppAdmin": true}

{
  "operationName": "SetStorageFileShareSettings",
  "query": "mutation SetStorageFileShareSettings($filePath: String!, $settings: StorageNodeShareSettingsInput!) { setStorageFileShareSettings(filePath: $filePath, settings: $settings) { id nodeType name dir path contentType size share { isPublic uids } created updated } }",
  "variables": {
    "filePath": "test-files/d1/fileA.txt",
    "settings": { "isPublic": true, "uids": ["ichiro"] }
  }
}

###
