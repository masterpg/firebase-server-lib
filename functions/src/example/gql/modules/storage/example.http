POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "yamada.one"}

{
  "operationName": "GetUserStorageDirNodes",
  "query": "query GetUserStorageDirNodes { userStorageDirNodes { nodeType name dir path created updated } }",
  "variables": {}
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "yamada.one"}

{
  "operationName": "GetUserStorageDirNodes",
  "query": "query GetUserStorageDirNodes($dirPath: String) { userStorageDirNodes(dirPath: $dirPath) { nodeType name dir path created updated } }",
  "variables": {
    "dirPath": "dir1"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "yamada.one"}

{
  "operationName": "CreateUserStorageDirs",
  "query": "mutation CreateUserStorageDirs($dirPaths: [String!]!) { createUserStorageDirs(dirPaths: $dirPaths) { nodeType name dir path created updated } }",
  "variables": {
    "dirPaths": [
      "dir1/dir1_1",
      "dir1/dir1_1/dir1_1_1",
      "dir1/dir1_1/dir1_1_2",
      "dir2/dir2_1"
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "yamada.one"}

{
  "operationName": "RemoveUserStorageFileNodes",
  "query": "mutation RemoveUserStorageFileNodes($filePaths: [String!]!) { removeUserStorageFiles(filePaths: $filePaths) { nodeType name dir path created updated } }",
  "variables": {
    "filePaths": [
      "docs/fileA.txt"
    ]
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "yamada.one"}

{
  "operationName": "RemoveUserStorageDirNodes",
  "query": "mutation RemoveUserStorageDirNodes($dirPath: String!) { removeUserStorageDir(dirPath: $dirPath) { nodeType name dir path created updated } }",
  "variables": {
    "dirPath": "dir1/dir1_1"
  }
}

###

POST {{host}}/api/gql
Content-Type: application/json
Authorization: Bearer {"uid": "kanri.one", "isAppAdmin": true}

{
  "operationName": "GetSignedUploadUrls",
  "query": "query GetSignedUploadUrls($inputs: [SignedUploadUrlInput!]!) { signedUploadUrls(inputs: $inputs) }",
  "variables": {
    "inputs": [
      {
        "filePath": "images/family.png",
        "contentType": "image/png"
      }
    ]
  }
}

###
