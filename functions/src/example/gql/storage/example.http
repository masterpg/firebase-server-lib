POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetStorageNode",
  "query": "query GetStorageNode($nodePath: String!) { storageNode(nodePath: $nodePath) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "nodePath": "test-files/d1"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetStorageDirDescendants",
  "query": "query GetStorageDirDescendants($dirPath: String, $options: StoragePaginationOptionsInput) { storageDirDescendants(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "nodePath": "test-files/d1",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetStorageDescendants",
  "query": "query GetStorageDescendants($dirPath: String, $options: StoragePaginationOptionsInput) { storageDescendants(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "nodePath": "test-files/d1",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetStorageDirChildren",
  "query": "query GetStorageDirChildren($dirPath: String, $options: StoragePaginationOptionsInput) { storageDirChildren(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "nodePath": "test-files/d1",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetStorageChildren",
  "query": "query GetStorageChildren($dirPath: String, $options: StoragePaginationOptionsInput) { storageChildren(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "dirPath": "test-files/d1",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetStorageHierarchicalNodes",
  "query": "query GetStorageHierarchicalNodes($nodePath: String!) { storageHierarchicalNodes(nodePath: $nodePath) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "nodePath": "test-files/d1/d11/d111"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
"operationName": "GetStorageAncestorDirs",
"query": "query GetStorageAncestorDirs($nodePath: String!) { storageAncestorDirs(nodePath: $nodePath) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "nodePath": "test-files/d1/d11/d111"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "CreateStorageDirs",
  "query": "mutation CreateStorageDirs($dirPaths: [String!]!) { createStorageDirs(dirPaths: $dirPaths) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "dirPaths": [
      "test-files/d1/d11",
      "test-files/d1/d11/d111",
      "test-files/d1/d11/d112",
      "test-files/dir2/dir2_1"
    ]
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "RemoveStorageDir",
  "query": "mutation RemoveStorageDir($dirPath: String!, $options: StoragePaginationOptionsInput) { removeStorageDir(dirPath: $dirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "dirPath": "test-files/d1",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "RemoveStorageFile",
  "query": "mutation RemoveStorageFile($filePath: String!) { removeStorageFile(filePath: $filePath) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "filePath": "test-files/d1/fileA.txt"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "MoveStorageDir",
  "query": "mutation MoveStorageDir($fromDirPath: String!, $toDirPath: String!, $options: StoragePaginationOptionsInput) { moveStorageDir(fromDirPath: $fromDirPath, toDirPath: $toDirPath, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "fromDirPath": "test-files/d1/d11",
    "toDirPath": "test-files/d1/d1X",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "MoveStorageFile",
  "query": "mutation MoveStorageFile($fromFilePath: String!, $toFilePath: String!) { moveStorageFile(fromFilePath: $fromFilePath, toFilePath: $toFilePath) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "fromFilePath": "test-files/d1/fileA.txt",
    "toFilePath": "test-files/d1/d11/fileA.txt"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "RenameStorageDir",
  "query": "mutation RenameStorageDir($dirPath: String!, $newName: String!, $options: StoragePaginationOptionsInput) { renameStorageDir(dirPath: $dirPath, newName: $newName, options: $options) { list { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } nextPageToken } }",
  "variables": {
    "dirPath": "test-files/d1/d11",
    "newName": "d1X",
    "options": { "maxChunk": 3 }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "RenameStorageFile",
  "query": "mutation RenameStorageFile($filePath: String!, $newName: String!) { renameStorageFile(filePath: $filePath, newName: $newName) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "filePath": "test-files/d1/fileA.txt",
    "newName": "fileB.txt"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "SetStorageDirShareSettings",
  "query": "mutation SetStorageDirShareSettings($dirPath: String!, $settings: StorageNodeShareSettingsInput!) { setStorageDirShareSettings(dirPath: $dirPath, settings: $settings) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "dirPath": "test-files/d1",
    "settings": { "isPublic": true, "readUIds":  ["ichiro"], "writeUIds": ["ichiro"] }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "SetStorageFileShareSettings",
  "query": "mutation SetStorageFileShareSettings($filePath: String!, $settings: StorageNodeShareSettingsInput!) { setStorageFileShareSettings(filePath: $filePath, settings: $settings) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "filePath": "test-files/d1/fileA.txt",
    "settings": { "isPublic": true, "readUIds":  ["ichiro"], "writeUIds":  ["ichiro"] }
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "HandleUploadedFile",
  "query": "mutation HandleUploadedFile($filePath: String!) { handleUploadedFile(filePath: $filePath) { id nodeType name dir path contentType size share { isPublic readUIds writeUIds } docBundleType isDoc docSortOrder version createdAt updatedAt } }",
  "variables": {
    "filePath": "test-files/d1/fileA.txt"
  }
}

###

POST {{host}}/gql
Content-Type: application/json
Authorization: Bearer {"uid": "app.admin", "authStatus": "Available", "isAppAdmin": true}

{
  "operationName": "GetSignedUploadUrls",
  "query": "query GetSignedUploadUrls($inputs: [SignedUploadUrlInput!]!) { signedUploadUrls(inputs: $inputs) }",
  "variables": {
    "inputs": [
      {
        "filePath": "images/family.png",
        "contentType": "image/png"
      }
    ]
  }
}

###

