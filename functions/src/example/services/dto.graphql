#========================================================================
#
#  Base types
#
#========================================================================

scalar DateTime

scalar Long

scalar JSON

scalar JSONObject

interface Entity {
  id: ID!
}

interface TimestampEntity {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

#--------------------------------------------------
#  user
#--------------------------------------------------

enum AuthStatus {
  WaitForEmailVerified
  WaitForEntry
  Available
}

type AuthDataResult {
  status: AuthStatus!
  token: String!
  user: UserInfo
}

type UserInfo implements TimestampEntity {
  id: ID!
  fullName: String!
  email: String!
  emailVerified: Boolean!
  isAppAdmin: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  publicProfile: PublicProfile!
}

type PublicProfile implements TimestampEntity {
  id: ID!
  displayName: String!
  photoURL: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserInfoInput {
  fullName: String!
  displayName: String!
}

#========================================================================
#
#  Value objects
#
#========================================================================

#--------------------------------------------------
#  foundation
#--------------------------------------------------

type StorageUsersConfig {
  rootName: String!
}

type StorageArticlesConfig {
  rootName: String!
  fileName: String!
  assetsName: String!
}

type AppConfigResponse {
  user: StorageUsersConfig!
  article: StorageArticlesConfig!
}

#--------------------------------------------------
#  storage
#--------------------------------------------------

enum StorageNodeType {
  File
  Dir
}

enum StorageArticleNodeType {
  ListBundle
  CategoryBundle
  Article
  Category
}

type StorageNode implements TimestampEntity {
  id: ID!
  nodeType: StorageNodeType!
  name: String!
  dir: String!
  path: String!
  contentType: String!
  size: Int!
  share: StorageNodeShareSettings!
  articleNodeType: StorageArticleNodeType
  articleSortOrder: Long
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StoragePaginationInput {
  maxChunk: Int
  pageToken: String
}

type StoragePaginationResult {
  list: [StorageNode!]!
  nextPageToken: String
}

type StorageNodeShareSettings {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input StorageNodeShareSettingsInput {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input StorageNodeKeyInput {
  id: String
  path: String
}

input SignedUploadUrlInput {
  filePath: String!
  contentType: String
}

input CreateStorageNodeInput {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input CreateArticleRootUnderDirInput {
  articleNodeType: StorageArticleNodeType
}

input SetArticleSortOrderInput {
  insertBeforeNodePath: String
  insertAfterNodePath: String
}

#--------------------------------------------------
#  dev
#--------------------------------------------------

input PutTestStoreDataInput {
  collectionName: String!
  collectionRecords: [JSONObject!]!
}

input TestSignedUploadUrlInput {
  filePath: String!
  contentType: String
}

input TestFirebaseUserInput {
  uid: ID!
  email: String
  emailVerified: Boolean
  password: String
  displayName: String
  disabled: Boolean
  photoURL: String
  customClaims: JSONObject
}

input TestUserInput {
  uid: ID!
  email: String
  emailVerified: Boolean
  password: String
  displayName: String!
  disabled: Boolean
  photoURL: String
  customClaims: JSONObject
  fullName: String!
}

#--------------------------------------------------
#  cart
#--------------------------------------------------

type CartItem implements TimestampEntity {
  id: ID!
  uid: ID!
  productId: ID!
  title: String!
  price: Float!
  quantity: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CartItemAddInput {
  productId: ID!
  title: String!
  price: Float!
  quantity: Int!
}

input CartItemUpdateInput {
  id: ID!
  quantity: Int!
}

type CartItemEditResponse {
  id: ID!
  uid: ID!
  productId: ID!
  title: String!
  price: Float!
  quantity: Int!
  product: Product!
}

#--------------------------------------------------
#  product
#--------------------------------------------------

type Product implements TimestampEntity {
  id: ID!
  title: String!
  price: Float!
  stock: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}
