input PaginationInput {
  maxChunk: Int
  pageToken: String
}

enum LangCode {
  ja
  en
}

#--------------------------------------------------
#  User
#--------------------------------------------------

enum AuthStatus {
  WaitForEmailVerified
  WaitForEntry
  Available
}

type User implements TimestampEntity {
  id: ID!
  email: String!
  emailVerified: Boolean!
  userName: String!
  fullName: String!
  isAppAdmin: Boolean!
  photoURL: String
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserInput {
  userName: String!
  fullName: String!
  photoURL: String
}

type SetUserInfoResult {
  status: SetUserInfoResultStatus!
  user: User
}

enum SetUserInfoResultStatus {
  AlreadyExists
  Success
}

type AuthDataResult {
  status: AuthStatus!
  token: String!
  user: User
}

#--------------------------------------------------
#  CoreStorage
#--------------------------------------------------

enum StorageNodeType {
  File
  Dir
}

input StorageNodeKeyInput {
  id: String!
  path: String!
}

input StorageNodeGetKeyInput {
  id: String
  path: String
}

input StorageNodeGetKeysInput {
  ids: [String!]
  paths: [String!]
}

type StorageNodeShareDetail {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input SetShareDetailInput {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input StorageNodeGetUnderInput {
  id: String
  path: String
  includeBase: Boolean
}

input SignedUploadUrlInput {
  id: String!
  path: String!
  contentType: String
}

input CreateStorageDirInput {
  dir: String!
  share: SetShareDetailInput
}

input MoveStorageDirInput {
  fromDir: String!
  toDir: String!
}

input MoveStorageFileInput {
  fromFile: String!
  toFile: String!
}

input RenameStorageDirInput {
  dir: String!
  name: String!
}

input RenameStorageFileInput {
  file: String!
  name: String!
}

#--------------------------------------------------
#  Storage
#--------------------------------------------------

enum StorageArticleDirType {
  ListBundle
  TreeBundle
  Article
  Category
}

enum StorageArticleFileType {
  MasterSrc
  DraftSrc
}

type StorageNode implements TimestampEntity {
  id: ID!
  nodeType: StorageNodeType!
  name: String!
  dir: String!
  path: String!
  contentType: String!
  size: Long!
  share: StorageNodeShareDetail!
  article: StorageArticleDetail
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StoragePaginationResult {
  list: [StorageNode!]!
  nextPageToken: String
  isPaginationTimeout: Boolean
}

type StorageArticleDetail {
  dir: StorageArticleDirDetail
  file: StorageArticleFileDetail
  src: StorageArticleSrcByLang
}

type StorageArticleDirDetail {
  label: StorageArticleDirLabelByLang!
  type: StorageArticleDirType!
  sortOrder: Long!
}

type StorageArticleDirLabelByLang {
  ja: String
  en: String
}

type StorageArticleFileDetail {
  type: StorageArticleFileType!
}

type StorageArticleSrcByLang {
  ja: StorageArticleSrcDetail
  en: StorageArticleSrcDetail
}

type StorageArticleSrcDetail {
  masterId: String
  draftId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateArticleTypeDirInput {
  lang: LangCode!
  dir: String!
  label: String!
  type: StorageArticleDirType!
  share: SetShareDetailInput
}

input CreateArticleGeneralDirInput {
  dir: String!
  share: SetShareDetailInput
}

input RenameArticleTypeDirInput {
  lang: LangCode!
  dir: String!
  label: String!
}

input SaveArticleMasterSrcFileInput {
  lang: LangCode!
  articleId: String!
  srcContent: String!
  textContent: String!
}

type SaveArticleMasterSrcFileResult {
  article: StorageNode!
  master: StorageNode!
  draft: StorageNode!
}

input SaveArticleDraftSrcFileInput {
  lang: LangCode!
  articleId: String!
  srcContent: String
}

type SaveArticleDraftSrcFileResult {
  article: StorageNode!
  draft: StorageNode!
}

type ArticleListItem {
  id: String!
  name: String!
  dir: String!
  path: String!
  label: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GetUserArticleListInput {
  lang: LangCode!
  userName: String!
  articleTypeDirId: String!
}

type ArticleListPaginationResult {
  list: [ArticleListItem!]!
  nextPageToken: String
}

type ArticleTableOfContentsItem {
  id: ID!
  name: String!
  dir: String!
  path: String!
  label: String!
  type: StorageArticleDirType!
}

input GetUserArticleTableOfContentsInput {
  lang: LangCode!
  userName: String!
}
