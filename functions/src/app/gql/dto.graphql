input NextTokenPaginationInput {
  pageSize: Int
  pageToken: String
}

input OffsetTokenPaginationInput {
  pageSize: Int
  offset: Int
  pageToken: String
}

enum LangCode {
  ja
  en
}

#--------------------------------------------------
#  User
#--------------------------------------------------

enum AuthStatus {
  WaitForEmailVerified
  WaitForEntry
  Available
}

type User implements TimestampEntity {
  id: ID!
  email: String!
  emailVerified: Boolean!
  userName: String!
  fullName: String!
  isAppAdmin: Boolean!
  photoURL: String
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserInput {
  userName: String!
  fullName: String!
  photoURL: String
}

type SetUserInfoResult {
  status: SetUserInfoResultStatus!
  user: User
}

enum SetUserInfoResultStatus {
  AlreadyExists
  Success
}

type AuthDataResult {
  status: AuthStatus!
  token: String!
  user: User
}

#--------------------------------------------------
#  CoreStorage
#--------------------------------------------------

enum StorageNodeType {
  File
  Dir
}

input StorageNodeKeyInput {
  id: String!
  path: String!
}

input StorageNodeGetKeyInput {
  id: String
  path: String
}

input StorageNodeGetKeysInput {
  ids: [String!]
  paths: [String!]
}

type StorageNodeShareDetail {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input StorageNodeShareDetailInput {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input StorageNodeGetUnderInput {
  id: String
  path: String
  includeBase: Boolean
}

input SignedUploadUrlInput {
  id: String!
  path: String!
  contentType: String
}

input CreateStorageDirInput {
  dir: String!
  share: StorageNodeShareDetailInput
}

input MoveStorageDirInput {
  fromDir: String!
  toDir: String!
}

input MoveStorageFileInput {
  fromFile: String!
  toFile: String!
}

input RenameStorageDirInput {
  dir: String!
  name: String!
}

input RenameStorageFileInput {
  file: String!
  name: String!
}

#--------------------------------------------------
#  Storage
#--------------------------------------------------

enum ArticleDirType {
  ListBundle
  TreeBundle
  Article
  Category
}

enum ArticleContentType {
  Src
  Draft
}

type StorageNode implements TimestampEntity {
  id: ID!
  nodeType: StorageNodeType!
  name: String!
  dir: String!
  path: String!
  contentType: String!
  size: Long!
  share: StorageNodeShareDetail!
  article: ArticleDetail
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StoragePaginationResult {
  list: [StorageNode!]!
  nextPageToken: String
  total: Int
  isPaginationTimeout: Boolean
}

type ArticleDetail {
  type: ArticleDirType!
  label: ArticleDirLabelByLang!
  sortOrder: Long!
  src: ArticleSrcByLang
}

type ArticleDirLabelByLang {
  ja: String
  en: String
}

type ArticleSrcByLang {
  ja: ArticleSrcDetail
  en: ArticleSrcDetail
}

type ArticleSrcDetail {
  srcContent: String
  draftContent: String
  searchContent: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateArticleTypeDirInput {
  lang: LangCode!
  dir: String!
  label: String!
  type: ArticleDirType!
  share: StorageNodeShareDetailInput
}

input CreateArticleGeneralDirInput {
  dir: String!
  share: StorageNodeShareDetailInput
}

input RenameArticleTypeDirInput {
  lang: LangCode!
  dir: String!
  label: String!
}

input SaveArticleSrcContentInput {
  lang: LangCode!
  srcContent: String!
  searchContent: String!
}

input SaveArticleDraftContentInput {
  lang: LangCode!
  draftContent: String
}

input GetArticleContentsNodeInput {
  lang: LangCode!
  contentTypes: [ArticleContentType!]!
}

type ArticlePathDetail {
  id: String
  label: String
}

type ArticleListItem {
  id: String!
  name: String!
  dir: [ArticlePathDetail!]!
  path: [ArticlePathDetail!]!
  label: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ArticleListPaginationResult {
  list: [ArticleListItem!]!
  pageToken: String
  total: Int
}

input GetUserArticleListInput {
  lang: LangCode!
  articleDirId: String!
}

type ArticleTableOfContentsItem {
  id: ID!
  name: String!
  dir: [ArticlePathDetail!]!
  path: [ArticlePathDetail!]!
  label: String!
  type: ArticleDirType!
  sortOrder: Long!
}

input GetUserArticleTableOfContentsInput {
  lang: LangCode!
  userName: String!
}
