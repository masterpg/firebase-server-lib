#--------------------------------------------------
#  Env
#--------------------------------------------------

#--------------------------------------------------
#  User
#--------------------------------------------------

enum AuthStatus {
  WaitForEmailVerified
  WaitForEntry
  Available
}

type User implements TimestampEntity {
  id: ID!
  email: String!
  emailVerified: Boolean!
  userName: String!
  fullName: String!
  isAppAdmin: Boolean!
  photoURL: String
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserInput {
  userName: String!
  fullName: String!
  photoURL: String
}

type SetOwnUserResult {
  status: SetOwnUserResultStatus!
  user: User
}

enum SetOwnUserResultStatus {
  AlreadyExists
  Success
}

type AuthDataResult {
  status: AuthStatus!
  token: String!
  user: User
}

#--------------------------------------------------
#  Storage
#--------------------------------------------------

enum StorageNodeType {
  File
  Dir
}

enum StorageArticleDirType {
  ListBundle
  TreeBundle
  Article
  Category
}

type StorageNode implements TimestampEntity {
  id: ID!
  nodeType: StorageNodeType!
  name: String!
  dir: String!
  path: String!
  contentType: String!
  size: Int!
  share: StorageNodeShareSettings!
  article: StorageArticleSettings
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StoragePaginationInput {
  maxChunk: Int
  pageToken: String
}

type StoragePaginationResult {
  list: [StorageNode!]!
  nextPageToken: String
  isPaginationTimeout: Boolean
}

type StorageNodeShareSettings {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

type StorageArticleSettings {
  dir: StorageArticleDirSettings
  file: StorageArticleFileSettings
}

type StorageArticleDirSettings {
  name: String!
  type: StorageArticleDirType!
  sortOrder: Long!
}

type StorageArticleFileSettings {
  type: String!
}

input StorageNodeShareSettingsInput {
  isPublic: Boolean
  readUIds: [String!]
  writeUIds: [String!]
}

input StorageNodeKeyInput {
  id: String!
  path: String!
}

input StorageNodeGetKeyInput {
  id: String
  path: String
}

input StorageNodeGetKeysInput {
  ids: [String!]
  paths: [String!]
}

input SignedUploadUrlInput {
  id: String!
  path: String!
  contentType: String
}

input CreateStorageNodeOptions {
  share: StorageNodeShareSettingsInput
}

input CreateArticleTypeDirInput {
  dir: String!
  name: String!
  type: StorageArticleDirType
}

type SaveArticleSrcMasterFileResult {
  master: StorageNode!
  draft: StorageNode!
}

input GetArticleChildrenInput {
  dirPath: String!
  types: [StorageArticleDirType!]!
}
