Index: src/store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/index.ts	(date 1548694261000)
+++ src/store/index.ts	(date 1548694261000)
@@ -0,0 +1,134 @@
+import Vue from 'vue'
+import Vuex, { Store, StoreOptions } from 'vuex'
+import { Component } from 'vue-property-decorator'
+
+import { CartItem, CartTypes, CheckoutStatus, CounterTypes, Product, ProductTypes, RootState } from './types'
+import { newCartModule } from './cart-module'
+import { newCounterModule } from './counter-module'
+import { newProductModule } from './product-module'
+
+Vue.use(Vuex)
+
+export const store = new Store<RootState>({
+  modules: {
+    [ProductTypes.PATH]: newProductModule(),
+    [CartTypes.PATH]: newCartModule(),
+    [CounterTypes.PATH]: newCounterModule(),
+  },
+} as StoreOptions<RootState>)
+
+@Component
+class AppStore extends Vue {
+  m_store: Store<RootState>
+
+  setStore(store: Store<RootState>) {
+    this.counter.setStore(store)
+    this.product.setStore(store)
+    this.cart.setStore(store)
+  }
+
+  m_counter = new CounterModule()
+
+  get counter(): CounterModule {
+    return this.m_counter
+  }
+
+  m_product = new ProductModule()
+
+  get product(): ProductModule {
+    return this.m_product
+  }
+
+  m_cart = new CartModule()
+
+  get cart(): CartModule {
+    return this.m_cart
+  }
+}
+
+@Component
+class CounterModule extends Vue {
+
+  m_store: Store<RootState>
+
+  setStore(store: Store<RootState>) {
+    this.m_store = store
+  }
+
+  get current(): number {
+    return this.m_store.getters[`${CounterTypes.PATH}/${CounterTypes.CURRENT}`]
+  }
+
+  increment(): void {
+    this.m_store.commit(`${CounterTypes.PATH}/${CounterTypes.INCREMENT}`)
+  }
+}
+
+@Component
+class ProductModule extends Vue {
+
+  m_store: Store<RootState>
+
+  setStore(store: Store<RootState>) {
+    this.m_store = store
+  }
+
+  get allProducts(): Product[] {
+    return this.m_store.getters[`${ProductTypes.PATH}/${ProductTypes.ALL_PRODUCTS}`]
+  }
+
+  getProductById(productId: string): Product | undefined {
+    return this.m_store.getters[`${ProductTypes.PATH}/${ProductTypes.GET_PRODUCT_BY_ID}`](productId)
+  }
+
+  getAllProducts(): Promise<void> {
+    return this.m_store.dispatch(`${ProductTypes.PATH}/${ProductTypes.GET_ALL_PRODUCTS}`)
+  }
+
+  setProducts(products: Product[]): void {
+    return this.m_store.commit(`${ProductTypes.PATH}/${ProductTypes.SET_PRODUCTS}`, products)
+  }
+
+  decrementProductInventory(productId: string): void {
+    return this.m_store.commit(`${ProductTypes.PATH}/${ProductTypes.DECREMENT_PRODUCT_INVENTORY}`, productId)
+  }
+}
+
+@Component
+class CartModule extends Vue {
+
+  m_store: Store<RootState>
+
+  setStore(store: Store<RootState>) {
+    this.m_store = store
+  }
+
+  get checkoutStatus(): CheckoutStatus {
+    return this.m_store.getters[`${CartTypes.PATH}/${CartTypes.CHECKOUT_STATUS}`]
+  }
+
+  get cartItems(): CartItem[] {
+    return this.m_store.getters[`${CartTypes.PATH}/${CartTypes.CART_ITEMS}`]
+  }
+
+  get cartTotalPrice(): number {
+    return this.m_store.getters[`${CartTypes.PATH}/${CartTypes.CART_TOTAL_PRICE}`]
+  }
+
+  getCartItemById(productId: string): Product | undefined {
+    return this.m_store.getters[`${CartTypes.PATH}/${CartTypes.GET_CART_ITEM_BY_ID}`](productId)
+  }
+
+  checkout(): Promise<void> {
+    return this.m_store.dispatch(`${CartTypes.PATH}/${CartTypes.CHECKOUT}`)
+  }
+
+  addProductToCart(productId: string): Promise<void> {
+    return this.m_store.dispatch(`${CartTypes.PATH}/${CartTypes.ADD_PRODUCT_TO_CART}`, productId)
+  }
+}
+
+export let appStore = new AppStore()
+appStore.setStore(store)
+
+export * from './types'
Index: src/store/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/types.ts	(date 1548693687000)
+++ src/store/types.ts	(date 1548693687000)
@@ -0,0 +1,118 @@
+import { Module } from 'vuex'
+import { Product as APIProduct } from '../apis'
+
+//----------------------------------------------------------------------
+//
+//  States
+//
+//----------------------------------------------------------------------
+
+export interface RootState {
+  counter: CounterModule
+  product: ProductModule
+  cart: CartModule
+}
+
+export interface ProductState {
+  all: Product[]
+}
+
+export interface CartState {
+  items: Array<{ id: string, quantity: number }>
+  checkoutStatus: CheckoutStatus
+}
+
+export interface CounterState {
+  counter: number
+}
+
+//----------------------------------------------------------------------
+//
+//  Modules
+//
+//----------------------------------------------------------------------
+
+export interface ProductModule extends Module<ProductState, RootState> {}
+
+export interface CartModule extends Module<CartState, RootState> {}
+
+export interface CounterModule extends Module<CounterState, RootState> {}
+
+//----------------------------------------------------------------------
+//
+//  Types
+//
+//----------------------------------------------------------------------
+
+export namespace CounterTypes {
+  export const PATH = 'counter'
+
+  export const CURRENT = 'current'
+
+  export const INCREMENT = 'increment'
+}
+
+export namespace ProductTypes {
+  export const PATH = 'product'
+
+  export const ALL_PRODUCTS = 'allProducts'
+
+  export const GET_PRODUCT_BY_ID = 'getProductById'
+
+  export const GET_ALL_PRODUCTS = 'getAllProducts'
+
+  export const SET_PRODUCTS = 'setProducts'
+
+  export const DECREMENT_PRODUCT_INVENTORY = 'decrementProductInventory'
+}
+
+export namespace CartTypes {
+  export const PATH = 'cart'
+
+  export const CHECKOUT_STATUS = 'checkoutStatus'
+
+  export const CART_ITEMS = 'cartItems'
+
+  export const CART_TOTAL_PRICE = 'cartTotalPrice'
+
+  export const GET_CART_ITEM_BY_ID = 'getCartItemById'
+
+  export const CHECKOUT = 'checkout'
+
+  export const ADD_PRODUCT_TO_CART = 'addProductToCart'
+
+  export const m_SET_CART_ITEMS = 'm_setCartItems'
+
+  export const m_SET_CHECKOUT_STATUS = 'm_setCheckoutStatus'
+
+  export const m_PUSH_PRODUCT_TO_CART = 'm_pushProductToCart'
+
+  export const m_INCREMENT_ITEM_QUANTITY = 'm_incrementItemQuantity'
+}
+
+//----------------------------------------------------------------------
+//
+//  Entities
+//
+//----------------------------------------------------------------------
+
+export type Product = APIProduct
+
+export interface CartItem {
+  id: string
+  title: string
+  price: number
+  quantity: number
+}
+
+//----------------------------------------------------------------------
+//
+//  Enumerations
+//
+//----------------------------------------------------------------------
+
+export enum CheckoutStatus {
+  None = 'none',
+  Failed = 'failed',
+  Successful = 'successful',
+}
Index: src/store/counter-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/counter-module/index.ts	(date 1548691505000)
+++ src/store/counter-module/index.ts	(date 1548691505000)
@@ -0,0 +1,28 @@
+import { GetterTree, MutationTree, ActionTree } from 'vuex'
+import { CounterModule, CounterState, CounterTypes, RootState } from '../types'
+
+export class CounterModuleImpl implements CounterModule {
+  namespaced = true
+
+  state: CounterState = {
+    counter: 1,
+  }
+
+  getters: GetterTree<CounterState, RootState> = {
+    [CounterTypes.CURRENT](state: CounterState): number {
+      return state.counter
+    },
+  }
+
+  mutations: MutationTree<CounterState> = {
+    [CounterTypes.INCREMENT](state: CounterState): void {
+      state.counter++
+    },
+  }
+
+  actions: ActionTree<CounterState, RootState> = {}
+}
+
+export function newCounterModule() {
+  return new CounterModuleImpl()
+}
Index: src/store/product-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/product-module/index.ts	(date 1548688697000)
+++ src/store/product-module/index.ts	(date 1548688697000)
@@ -0,0 +1,48 @@
+import { GetterTree, MutationTree, ActionTree } from 'vuex'
+import { ProductModule, ProductState, RootState, Product, ProductTypes } from '../types'
+import { apis } from '@/apis'
+
+export class ProductModuleImpl implements ProductModule {
+  namespaced = true
+
+  state: ProductState = {
+    all: [],
+  }
+
+  getters: GetterTree<ProductState, RootState> = {
+    [ProductTypes.ALL_PRODUCTS](state): Product[] {
+      return state.all
+    },
+
+    [ProductTypes.GET_PRODUCT_BY_ID](state) {
+      return (productId: string) => {
+        const product = state.all.find((item) => item.id === productId)
+        return product
+      }
+    },
+  }
+
+  mutations: MutationTree<ProductState> = {
+    [ProductTypes.SET_PRODUCTS](state, products: Product[]): void {
+      state.all = products
+    },
+
+    [ProductTypes.DECREMENT_PRODUCT_INVENTORY](state, productId: string): void {
+      const product = state.all.find((item) => item.id === productId)
+      if (product) {
+        product.inventory--
+      }
+    },
+  }
+
+  actions: ActionTree<ProductState, RootState> = {
+    async [ProductTypes.GET_ALL_PRODUCTS](context): Promise<void> {
+      const products = await apis.shop.getProducts()
+      context.commit(ProductTypes.SET_PRODUCTS, products)
+    },
+  }
+}
+
+export function newProductModule() {
+  return new ProductModuleImpl()
+}
Index: src/store/cart-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/cart-module/index.ts	(date 1548688697000)
+++ src/store/cart-module/index.ts	(date 1548688697000)
@@ -0,0 +1,122 @@
+import { CartModule, CartState, RootState, CartItem, CartTypes, CheckoutStatus, Product, ProductState, ProductTypes } from '../types'
+import { GetterTree, MutationTree, ActionTree } from 'vuex'
+import { apis } from '@/apis'
+
+class CartModuleImpl implements CartModule {
+  namespaced = true
+
+  state: CartState = {
+    items: [],
+    checkoutStatus: CheckoutStatus.None,
+  }
+
+  getters: GetterTree<CartState, RootState> = {
+    [CartTypes.CHECKOUT_STATUS](state): CheckoutStatus {
+      return state.checkoutStatus
+    },
+
+    [CartTypes.CART_ITEMS](state, getters, rootState): CartItem[] {
+      const allProducts = (rootState.product as ProductState).all
+      return state.items.map(({ id, quantity }) => {
+        const product = allProducts.find((item) => item.id === id)!
+        return {
+          id: product.id,
+          title: product.title,
+          price: product.price,
+          quantity,
+        }
+      })
+    },
+
+    [CartTypes.CART_TOTAL_PRICE](state, getters): number {
+      const cartItems = getters[CartTypes.CART_ITEMS] as CartItem[]
+      return cartItems.reduce((total, product) => {
+        return total + product.price * product.quantity
+      }, 0)
+    },
+
+    [CartTypes.GET_CART_ITEM_BY_ID](state, getters, rootState, rootGetters): (productId: string) => CartItem | undefined | null {
+      return (productId: string) => {
+        const product = getProductById(rootGetters, productId)
+        const cartItem = state.items.find((item) => {
+          return item.id === productId
+        })
+        if (!cartItem) return undefined
+        return {
+          id: cartItem.id,
+          title: product.title,
+          price: product.price,
+          quantity: cartItem.quantity,
+        } as CartItem
+      }
+    },
+  }
+
+  mutations: MutationTree<CartState> = {
+    [CartTypes.m_SET_CART_ITEMS](state, items: Array<{ id: string, quantity: number }>) {
+      state.items = items
+    },
+
+    [CartTypes.m_SET_CHECKOUT_STATUS](state, status: CheckoutStatus) {
+      state.checkoutStatus = status
+    },
+
+    [CartTypes.m_PUSH_PRODUCT_TO_CART](state, productId: string) {
+      state.items.push({
+        id: productId,
+        quantity: 1,
+      })
+    },
+
+    [CartTypes.m_INCREMENT_ITEM_QUANTITY](state, productId: string) {
+      const cartItem = state.items.find((item) => item.id === productId)
+      if (cartItem) {
+        cartItem.quantity++
+      }
+    },
+  }
+
+  actions: ActionTree<CartState, RootState> = {
+    async [CartTypes.ADD_PRODUCT_TO_CART](context, productId: string): Promise<void> {
+      context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.None)
+      const product = getProductById(context.rootGetters, productId)
+      if (product.inventory > 0) {
+        const cartItem = context.state.items.find((item) => item.id === product.id)
+        if (!cartItem) {
+          context.commit(CartTypes.m_PUSH_PRODUCT_TO_CART, product.id)
+        } else {
+          context.commit(CartTypes.m_INCREMENT_ITEM_QUANTITY, product.id)
+        }
+        // 在庫を1つ減らす
+        context.commit(`${ProductTypes.PATH}/${ProductTypes.DECREMENT_PRODUCT_INVENTORY}`, productId, { root: true })
+      }
+    },
+
+    async [CartTypes.CHECKOUT](context): Promise<void> {
+      const cartProducts = [ ...context.state.items ]
+      context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.None)
+      try {
+        await apis.shop.buyProducts(cartProducts)
+        context.commit(CartTypes.m_SET_CART_ITEMS, []) // カートを空にする
+        context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.Successful)
+      } catch (err) {
+        // カートの内容をAPIリクエス前の状態にロールバックする
+        context.commit(CartTypes.m_SET_CART_ITEMS, cartProducts)
+        context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.Failed)
+      }
+    },
+  }
+}
+
+function getProductById(rootGetters: any, productId: string): Product {
+  const path = `${ProductTypes.PATH}/${ProductTypes.GET_PRODUCT_BY_ID}`
+  const result = rootGetters[path](productId) as Product | undefined | null
+  if (!result) {
+    throw new Error(`A Product that matches the specified productId "${productId}" was not found.`)
+  }
+  return result
+}
+
+export function newCartModule() {
+  return new CartModuleImpl()
+}
\ No newline at end of file
Index: src/views/shopping-view/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/views/shopping-view/index.vue	(date 1548687751000)
+++ src/views/shopping-view/index.vue	(date 1548693777000)
@@ -77,8 +77,9 @@
 import '@polymer/paper-icon-button/paper-icon-button'
 
 import { BaseComponent } from '@/base/component'
-import { CartItem, CheckoutStatus, Product } from '@/stores'
+import { CartItem, CheckoutStatus, Product } from '@/store'
 import { Component } from 'vue-property-decorator'
+import { appStore } from '@/store'
 import { mixins } from 'vue-class-component'
 
 @Component
@@ -94,19 +95,19 @@
   }
 
   get m_products(): Product[] {
-    return this.$stores.product.allProducts
+    return appStore.product.allProducts
   }
 
   get m_cartItems(): CartItem[] {
-    return this.$stores.cart.cartItems
+    return appStore.cart.cartItems
   }
 
   get m_cartTotalPrice(): number {
-    return this.$stores.cart.cartTotalPrice
+    return appStore.cart.cartTotalPrice
   }
 
   get m_checkoutStatus(): { result: boolean, message: string } {
-    const result = this.$stores.cart.checkoutStatus === CheckoutStatus.None || this.$stores.cart.checkoutStatus === CheckoutStatus.Successful
+    const result = appStore.cart.checkoutStatus === CheckoutStatus.None || appStore.cart.checkoutStatus === CheckoutStatus.Successful
     return {
       result,
       message: result ? '' : 'Checkout failed.',
@@ -119,7 +120,9 @@
   //
   //----------------------------------------------------------------------
 
-  created() {}
+  created() {
+    appStore.product.getAllProducts()
+  }
 
   //----------------------------------------------------------------------
   //
@@ -128,11 +131,11 @@
   //----------------------------------------------------------------------
 
   m_addProductToCart(product: Product): void {
-    this.$stores.cart.addProductToCart(product.id)
+    appStore.cart.addProductToCart(product.id)
   }
 
   async m_checkout(): Promise<void> {
-    await this.$stores.cart.checkout()
+    await appStore.cart.checkout()
   }
 }
 </script>
Index: src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/index.ts	(date 1548687751000)
+++ src/index.ts	(date 1548690676000)
@@ -9,20 +9,19 @@
 import { initAPI } from '@/apis'
 import { initConfig } from '@/base/config'
 import { initServiceWorker } from '@/base/service-worker'
-import { initStores } from '@/stores'
 import { initUtils } from '@/base/utils'
 import { router } from '@/base/router'
+import { store } from '@/store'
 
 // TODO JetBrainsIDE使用時の開発補助コード
-// import '@/views/abc-view/index.vue'
-// import '@/views/shopping-view/index.vue'
+import '@/views/abc-view/index.vue'
+import '@/views/shopping-view/index.vue'
 
 (async () => {
   initUtils()
   initConfig()
   initServiceWorker()
   initAPI()
-  initStores()
   await initI18n()
 
   Vue.filter('currency', currency)
@@ -32,5 +31,6 @@
     router,
     render: (h) => h(AppView),
     i18n,
+    store,
   })
 })()
Index: src/views/abc-view/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/views/abc-view/index.vue	(date 1548687751000)
+++ src/views/abc-view/index.vue	(date 1548690824000)
@@ -58,7 +58,10 @@
           <span class="title">checked: </span><span class="value">{{ m_customChecked }}</span>
         </span>
       </div>
-      <div class="layout horizontal end-justified"><paper-button raised @click="m_sleepButtonOnClick">Sleep</paper-button></div>
+      <div class="layout horizontal end-justified">
+        <paper-button raised @click="m_incrementButtonOnClick">Increment</paper-button>
+        <paper-button raised @click="m_sleepButtonOnClick">Sleep</paper-button>
+      </div>
     </paper-card>
   </div>
 </template>
@@ -74,6 +77,7 @@
 import { BaseComponent } from '@/base/component'
 import { Component, Prop, Watch } from 'vue-property-decorator'
 import { mixins } from 'vue-class-component'
+import { appStore } from '@/store'
 
 interface Post {
   message: string
@@ -199,6 +203,11 @@
     alert(await this.m_sleep(2000))
   }
 
+  async m_incrementButtonOnClick() {
+    appStore.counter.increment()
+    console.log(appStore.counter.current)
+  }
+
   //--------------------------------------------------
   //  elements
   //--------------------------------------------------
