Index: src/app/apis/shop-api/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/apis/shop-api/index.ts	(date 1535768688000)
+++ src/app/apis/shop-api/index.ts	(date 1535769899000)
@@ -17,6 +17,10 @@
       }, 100);
     });
   }
+
+  async updateProduct(product: Product): Promise<void> {
+    await this.put(`products/${product.id}`, product);
+  }
 }
 
 const shopAPI: ShopAPI = new ShopAPIImpl();
Index: src/app/apis/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/apis/types.ts	(date 1535768688000)
+++ src/app/apis/types.ts	(date 1535769899000)
@@ -12,6 +12,8 @@
   getProducts(): Promise<Product[]>;
 
   buyProducts(products: Array<{ id: string; quantity: number }>): Promise<void>;
+
+  updateProduct(product: Product): Promise<void>;
 }
 
 //----------------------------------------------------------------------
Index: src/app/router/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/router/index.ts	(date 1535768688000)
+++ src/app/router/index.ts	(date 1535769899000)
@@ -15,5 +15,10 @@
       component: () =>
         import(/* webpackChunkName: "shopping-view" */ '../views/shopping-view/index.vue'),
     },
+    {
+      path: '/product-admin',
+      component: () =>
+        import(/* webpackChunkName: "product-admin-view" */ '../views/product-admin-view/index.vue'),
+    },
   ],
 });
Index: src/app/stores/product-store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/stores/product-store/index.ts	(date 1535768688000)
+++ src/app/stores/product-store/index.ts	(date 1535769899000)
@@ -66,6 +66,14 @@
     this.f_state.all = products;
   }
 
+  async updateProduct(product: Product): Promise<void> {
+    const stateProduct = this.m_getStateProductById(product.id);
+    if (stateProduct) {
+      await this.$apis.shop.updateProduct(product);
+      this.$utils.assignIn(stateProduct, product);
+    }
+  }
+
   //----------------------------------------------------------------------
   //
   //  Internal methods
Index: src/app/stores/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/stores/types.ts	(date 1535768688000)
+++ src/app/stores/types.ts	(date 1535769899000)
@@ -20,6 +20,8 @@
   decrementProductInventory(productId: string): void;
 
   getAllProducts(): Promise<void>;
+
+  updateProduct(product: Product): Promise<void>;
 }
 
 export interface CartStore {
Index: src/app/views/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/views/index.vue	(date 1535768688000)
+++ src/app/views/index.vue	(date 1535769899000)
@@ -119,6 +119,10 @@
       title: 'Shopping',
       path: '/shopping',
     },
+    {
+      title: 'Product Admin',
+      path: '/product-admin',
+    },
   ];
 
   m_swMessage: string = '';
Index: src/assets/styles/main.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/assets/styles/main.css	(date 1535768688000)
+++ src/assets/styles/main.css	(date 1535769899000)
@@ -23,6 +23,8 @@
   --app-link-color: var(--app-indigo-500);
   --app-link-visited-color: var(--app-indigo-300);
   --app-default-border-color: var(--app-grey-300);
+  --app-grid-selected-hover-item: var(--app-grey-100);
+  --app-grid-selected-activ-item: var(--app-grey-300);
 
   /**
    * Grid
Index: test/app/stores/product-store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/app/stores/product-store/index.ts	(date 1535768688000)
+++ test/app/stores/product-store/index.ts	(date 1535769899000)
@@ -68,4 +68,39 @@
     await productStore.getAllProducts();
     assert.deepEqual(productStore.allProducts, NEW_API_PRODUCTS);
   });
+
+  test('updateProduct() - 一般ケース', async () => {
+    // 対象の商品に更新データを設定
+    const PRODUCT_ID = '1';
+    const product = productStore.getProductById(PRODUCT_ID);
+    if (!product) throw new Error(`Product \`${PRODUCT_ID}\` was not found.`);
+    product.title = 'aaa';
+    product.price = 111;
+    product.inventory = 222;
+
+    // モック処理の設定
+    const stateProduct = {} as Product;
+    td.replace(productStore, 'm_getStateProductById');
+    td.when(productStore.m_getStateProductById(PRODUCT_ID)).thenReturn(stateProduct);
+    td.replace(shopAPI, 'updateProduct');
+
+    // 商品の更新を実行
+    await productStore.updateProduct(product);
+
+    // Stateの商品と引数の商品の内容が一致することを検証
+    // (Stateの商品に引数の商品の内容が反映されるため)
+    assert.deepEqual(stateProduct, product);
+    // `ShopAPI#updateProduct()`が呼び出されたことを検証
+    td.verify(shopAPI.updateProduct(product));
+  });
+
+  test('updateProduct() - 存在しない商品を指定した場合', async () => {
+    // 対象の商品に更新データを設定
+    const product = productStore.getProductById('1') as Product;
+    product.id = '9876';
+    // 商品の更新を実行
+    await productStore.updateProduct(product);
+    // 何も問題は起きない
+    assert(true);
+  });
 });
