Index: src/app/views/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/views/index.vue	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/app/views/index.vue	(date 1531646721000)
@@ -119,6 +119,10 @@
       title: 'Shopping',
       path: '/shopping',
     },
+    {
+      title: 'Product Admin',
+      path: '/product-admin',
+    },
   ];
 
   m_swMessage: string = '';
Index: src/app/views/product-admin-view/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/views/product-admin-view/index.vue	(date 1531647860000)
+++ src/app/views/product-admin-view/index.vue	(date 1531647860000)
@@ -0,0 +1,225 @@
+<style lang="stylus" scoped>
+@import '../../../assets/styles/_flex-layout.styl';
+@import '../../../assets/styles/_spacing.styl';
+@import '../../../assets/styles/_typography.styl';
+
+.title-text {
+  @extend .app-font-title;
+}
+
+.product-item {
+  @extend .app-pa-12;
+  cursor: pointer;
+
+  &:hover {
+    background-color: var(--app-grid-selected-hover-item);
+  }
+
+  &.iron-selected {
+    background-color: var(--app-grid-selected-activ-item);
+  }
+
+  .title {
+    @extend .app-font-subhead;
+  }
+
+  .detail {
+    @extend .app-font-body1;
+    color: var(--app-secondary-text-color);
+  }
+}
+
+.product-detail {
+  padding: 0 var(--app-spacer-3);
+
+  .row {
+    width: 500px;
+    &.sp {
+      width: 100%;
+    }
+  }
+
+  .title-area {
+    @extend .app-font-subhead;
+    @extend .flex-2;
+    @extend .app-mt-16;
+  }
+
+  .input-area {
+    @extend .flex-10;
+
+    .title-input {
+      width: 400px;
+      &.sp {
+        width: 100%;
+      }
+    }
+
+    .price-input, .inventory-input {
+      width: 100px;
+      text-align: right;
+    }
+  }
+}
+
+.update-button {
+  color: var(--app-link-color);
+}
+</style>
+
+
+<template>
+  <div class="layout vertical" :class="{ 'app-ma-48': f_pc, 'app-ma-24': f_tab, 'app-ma-12': f_sp }">
+
+    <div>
+      <div class="layout horizontal center">
+        <div class="title-text">Products</div>
+      </div>
+      <hr style="width: 100%;">
+      <iron-selector
+        ref="productSelector"
+        attr-for-selected="product-id"
+        @selected-changed="m_productSelectorOnSelectedItemChanged"
+      >
+        <div
+          v-for="(product, index) in m_products"
+          class="layout horizontal center product-item"
+          :product-id="product.id"
+        >
+          <div class="layout vertical center-justified">
+            <div class="title">{{ product.title }}</div>
+            <div class="detail">
+              <span>Price</span> &mdash; {{ product.price | currency }},&nbsp;
+              <span>Stock</span> &mdash; {{ product.inventory }}
+            </div>
+          </div>
+          <div class="flex"></div>
+        </div>
+      </iron-selector>
+    </div>
+
+    <div class="app-mt-20">
+      <div class="layout horizontal center">
+        <div class="title-text">Detail</div>
+      </div>
+      <hr style="width: 100%;">
+      <div class="layout vertical product-detail">
+        <div class="layout horizontal center row" :class="{ 'sp': f_sp }">
+          <div class="title-area">Title</div>
+          <div class="input-area">
+            <paper-input
+              class="title-input" :class="{ 'sp': f_sp }"
+              :value="m_selectedProduct.title"
+              @input="m_selectedProduct.title = $event.target.value"
+            ></paper-input>
+          </div>
+        </div>
+        <div class="layout horizontal center row" :class="{ 'sp': f_sp }">
+          <div class="title-area">Price</div>
+          <div class="input-area">
+            <paper-input
+              class="price-input"
+              type="number"
+              :value="m_selectedProduct.price"
+              @input="m_selectedProduct.price = $event.target.value"
+              @change="m_selectedProduct.price = $event.target.value"
+            >
+              <div slot="prefix">$</div>
+            </paper-input>
+          </div>
+        </div>
+        <div class="layout horizontal center row" :class="{ 'sp': f_sp }">
+          <div class="title-area">Stock</div>
+          <div class="input-area">
+            <paper-input
+              class="inventory-input"
+              type="number"
+              :value="m_selectedProduct.inventory"
+              @input="m_selectedProduct.inventory = $event.target.value"
+              @change="m_selectedProduct.inventory = $event.target.value"
+            ></paper-input>
+          </div>
+        </div>
+      </div>
+      <div class="layout horizontal center end-justified">
+        <paper-button
+          v-show="!!m_selectedProduct.id"
+          class="update-button"
+          @click="m_updateProduct"
+        >
+          Update
+        </paper-button>
+      </div>
+    </div>
+
+  </div>
+</template>
+
+
+<script lang="ts">
+import '@polymer/iron-selector/iron-selector';
+import '@polymer/paper-input/paper-input';
+import { Component } from 'vue-property-decorator';
+import { ElementComponent } from '../../components';
+import { Product } from '../../stores/types';
+import { mixins } from 'vue-class-component';
+
+@Component
+export default class ProductAdminView extends mixins(ElementComponent) {
+  //----------------------------------------------------------------------
+  //
+  //  Variables
+  //
+  //----------------------------------------------------------------------
+
+  m_selectedProduct: Product | object = {};
+
+  get m_products(): Product[] {
+    return this.$stores.product.allProducts;
+  }
+
+  //--------------------------------------------------
+  //  Elements
+  //--------------------------------------------------
+
+  get m_productSelector(): { selected: string } {
+    return this.$refs.productSelector as any;
+  }
+
+  //----------------------------------------------------------------------
+  //
+  //  Lifecycle hooks
+  //
+  //----------------------------------------------------------------------
+
+  created() {}
+
+  //----------------------------------------------------------------------
+  //
+  //  Internal methods
+  //
+  //----------------------------------------------------------------------
+
+  async m_updateProduct(): Promise<void> {
+    await this.$stores.product.updateProduct(this.m_selectedProduct as Product);
+  }
+
+  //----------------------------------------------------------------------
+  //
+  //  Event handlers
+  //
+  //----------------------------------------------------------------------
+
+  m_productSelectorOnSelectedItemChanged(event) {
+    let selectedProduct: Product | undefined;
+    if (this.m_productSelector.selected) {
+      const productId = this.m_productSelector.selected;
+      const foundProduct = this.m_products.find((item) => item.id === productId);
+      selectedProduct = this.$utils.cloneDeep(foundProduct);
+    }
+    // tslint:disable-next-line
+    console.log('selectedProduct:', selectedProduct);
+    this.m_selectedProduct = selectedProduct || {};
+  }
+}
+</script>
Index: src/assets/styles/main.styl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/assets/styles/main.styl	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/assets/styles/main.styl	(date 1531647686000)
@@ -23,6 +23,8 @@
   --app-link-color: var(--app-indigo-500);
   --app-link-visited-color: var(--app-indigo-300);
   --app-default-border-color: var(--app-grey-300);
+  --app-grid-selected-hover-item: var(--app-grey-100);
+  --app-grid-selected-activ-item: var(--app-grey-300);
 
   /**
    * Grid
Index: src/app/router/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/router/index.ts	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/app/router/index.ts	(date 1531646721000)
@@ -15,5 +15,10 @@
       component: () =>
         import(/* webpackChunkName: "shopping-view" */ '../views/shopping-view/index.vue'),
     },
+    {
+      path: '/product-admin',
+      component: () =>
+        import(/* webpackChunkName: "product-admin-view" */ '../views/product-admin-view/index.vue'),
+    },
   ],
 });
Index: src/app/apis/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/apis/types.ts	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/app/apis/types.ts	(date 1531647860000)
@@ -12,6 +12,8 @@
   getProducts(): Promise<Product[]>;
 
   buyProducts(products: Array<{ id: string; quantity: number }>): Promise<void>;
+
+  updateProduct(product: Product): Promise<void>;
 }
 
 //----------------------------------------------------------------------
Index: src/app/apis/shop-api/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/apis/shop-api/index.ts	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/app/apis/shop-api/index.ts	(date 1531647860000)
@@ -17,6 +17,10 @@
       }, 100);
     });
   }
+
+  async updateProduct(product: Product): Promise<void> {
+    await this.put(`products/${product.id}`, product);
+  }
 }
 
 const shopAPI: ShopAPI = new ShopAPIImpl();
Index: src/app/stores/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/stores/types.ts	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/app/stores/types.ts	(date 1531647860000)
@@ -20,6 +20,8 @@
   decrementProductInventory(productId: string): void;
 
   getAllProducts(): Promise<void>;
+
+  updateProduct(product: Product): Promise<void>;
 }
 
 export interface CartStore {
Index: test/app/stores/product-store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/app/stores/product-store/index.ts	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ test/app/stores/product-store/index.ts	(date 1531647949000)
@@ -68,4 +68,39 @@
     await productStore.getAllProducts();
     assert.deepEqual(productStore.allProducts, NEW_API_PRODUCTS);
   });
+
+  test('updateProduct() - 一般ケース', async () => {
+    // 対象の商品に更新データを設定
+    const PRODUCT_ID = '1';
+    const product = productStore.getProductById(PRODUCT_ID);
+    if (!product) throw new Error(`Product \`${PRODUCT_ID}\` was not found.`);
+    product.title = 'aaa';
+    product.price = 111;
+    product.inventory = 222;
+
+    // モック処理の設定
+    const stateProduct = {} as Product;
+    td.replace(productStore, 'm_getStateProductById');
+    td.when(productStore.m_getStateProductById(PRODUCT_ID)).thenReturn(stateProduct);
+    td.replace(shopAPI, 'updateProduct');
+
+    // 商品の更新を実行
+    await productStore.updateProduct(product);
+
+    // Stateの商品と引数の商品の内容が一致することを検証
+    // (Stateの商品に引数の商品の内容が反映されるため)
+    assert.deepEqual(stateProduct, product);
+    // `ShopAPI#updateProduct()`が呼び出されたことを検証
+    td.verify(shopAPI.updateProduct(product));
+  });
+
+  test('updateProduct() - 存在しない商品を指定した場合', async () => {
+    // 対象の商品に更新データを設定
+    const product = productStore.getProductById('1') as Product;
+    product.id = '9876';
+    // 商品の更新を実行
+    await productStore.updateProduct(product);
+    // 何も問題は起きない
+    assert(true);
+  });
 });
Index: src/app/stores/product-store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/stores/product-store/index.ts	(revision 8405c0f6be5c1c747ab896ad22da4baa68a1da10)
+++ src/app/stores/product-store/index.ts	(date 1531647860000)
@@ -66,6 +66,14 @@
     this.f_state.all = products;
   }
 
+  async updateProduct(product: Product): Promise<void> {
+    const stateProduct = this.m_getStateProductById(product.id);
+    if (stateProduct) {
+      await this.$apis.shop.updateProduct(product);
+      this.$utils.assignIn(stateProduct, product);
+    }
+  }
+
   //----------------------------------------------------------------------
   //
   //  Internal methods
