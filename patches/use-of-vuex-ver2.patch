Index: src/store/counter-module/index.ts
===================================================================
--- src/store/counter-module/index.ts	(revision Shelved Version)
+++ src/store/counter-module/index.ts	(revision Shelved Version)
@@ -0,0 +1,24 @@
+import { GetterTree, MutationTree, ActionTree } from 'vuex'
+import { CounterModule, CounterState, RootState } from '../types'
+
+export const counterModule = new class implements CounterModule {
+  namespaced = true
+
+  state: CounterState = {
+    counter: 1,
+  }
+
+  getters: GetterTree<CounterState, RootState> = {
+    current(state: CounterState): number {
+      return state.counter
+    },
+  }
+
+  mutations: MutationTree<CounterState> = {
+    increment(state: CounterState): void {
+      state.counter++
+    },
+  }
+
+  actions: ActionTree<CounterState, RootState> = {}
+}()
Index: src/store/base.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/base.ts	(revision Local Version)
+++ src/store/base.ts	(revision Local Version)
@@ -1,32 +0,0 @@
-import Vue from 'vue'
-import { APIs } from '@/apis'
-
-export abstract class BaseModule<S> extends Vue {
-  //----------------------------------------------------------------------
-  //
-  //  Variables
-  //
-  //----------------------------------------------------------------------
-
-  protected readonly $apis: APIs
-
-  m_state: S
-
-  get f_state(): S {
-    return this.m_state
-  }
-
-  //----------------------------------------------------------------------
-  //
-  //  Internal methods
-  //
-  //----------------------------------------------------------------------
-
-  /**
-   * Moduleにひも付くStateを初期化します。
-   * @param state
-   */
-  f_initState(state: S): void {
-    this.m_state = state
-  }
-}
Index: test/api/shop-api/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/api/shop-api/index.ts	(revision Local Version)
+++ test/api/shop-api/index.ts	(revision Local Version)
@@ -1,9 +0,0 @@
-import _shopAPI from '@/apis/shop-api'
-
-const assert = chai.assert
-
-suite('api/shop-api', () => {
-  test('サンプルテスト', () => {
-    assert.equal(1, 1)
-  })
-})
Index: test/store/cart-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/store/cart-module/index.ts	(revision Local Version)
+++ test/store/cart-module/index.ts	(revision Local Version)
@@ -1,109 +0,0 @@
-import * as td from 'testdouble'
-import { newProductModule } from '@/store/product-module'
-import { CartState, CartModuleImpl, newCartModule } from '@/store/cart-module'
-import { CheckoutStatus } from '@/store'
-import { Product as APIProduct } from '@/apis'
-import { TestModule } from '../../types'
-
-const assert = chai.assert
-
-suite('store/cart-module', () => {
-  const productModule = newProductModule()
-  const cartModule = newCartModule({ product: productModule }) as CartModuleImpl & TestModule<CartState>
-  const shopAPI = cartModule.$apis.shop
-
-  const PRODUCTS: APIProduct[] = [
-    { id: '1', title: 'iPad 4 Mini', price: 500.01, inventory: 2 },
-    { id: '2', title: 'H&M T-Shirt White', price: 10.99, inventory: 10 },
-    { id: '3', title: 'Charli XCX - Sucker CD', price: 19.99, inventory: 5 },
-  ]
-
-  setup(() => {
-    cartModule.f_initState({
-      items: [],
-      checkoutStatus: CheckoutStatus.None,
-    })
-  })
-
-  teardown(() => {
-    cartModule.f_initState({
-      items: [],
-      checkoutStatus: CheckoutStatus.None,
-    })
-    td.reset()
-  })
-
-  test('getCartItemById() - 一般ケース', () => {
-    cartModule.f_state.items = [ { id: '1', quantity: 1 } ]
-    const product = PRODUCTS[0]
-    td.replace(cartModule, 'm_getProductById')
-    td.when(cartModule.m_getProductById(product.id)).thenReturn(product)
-
-    const actual = cartModule.getCartItemById(product.id)
-    assert.deepEqual(actual, {
-      id: product.id,
-      title: product.title,
-      price: product.price,
-      quantity: 1,
-    })
-  })
-
-  test('getCartItemById() - 存在しない商品IDを指定した場合', () => {
-    assert.throws(() => cartModule.getCartItemById('9876'), Error, 'A product that matches the specified productId "9876" was not found.')
-  })
-
-  test('addProductToCart() - 一般ケース', () => {
-    const product = PRODUCTS[1]
-    // 【準備】
-    td.replace(cartModule, 'm_getProductById')
-    td.when(cartModule.m_getProductById(product.id)).thenReturn(product)
-
-    const decrementProductInventory = td.replace(productModule, 'decrementProductInventory')
-
-    // 【実行】
-    // `addProductToCart()`を2回実行
-    cartModule.addProductToCart(product.id)
-    cartModule.addProductToCart(product.id)
-
-    // 【検証】
-    assert.equal(cartModule.f_state.checkoutStatus, CheckoutStatus.None)
-    // カートに追加された商品とその数量を検証
-    const cartItem = cartModule.getCartItemById(product.id)
-    assert.equal(cartItem!.id, product.id)
-    assert.equal(cartItem!.quantity, 2)
-
-    // `ProductModule#decrementProductInventory()`の呼び出し回数と渡された引数を検証
-    const decrementProductInventoryExplain = td.explain(decrementProductInventory)
-    assert.equal(decrementProductInventoryExplain.callCount, 2)
-    assert.equal(decrementProductInventoryExplain.calls[0].args[0], product.id)
-    assert.equal(decrementProductInventoryExplain.calls[1].args[0], product.id)
-  })
-
-  test('checkout() - 一般ケース', async () => {
-    const CART_ITEMS = [ { id: '1', quantity: 1 }, { id: '2', quantity: 1 } ]
-    cartModule.f_state.items = CART_ITEMS
-    const buyProducts = td.replace(shopAPI, 'buyProducts')
-    td.when(shopAPI.buyProducts(CART_ITEMS)).thenResolve()
-
-    await cartModule.checkout()
-    assert.equal(cartModule.f_state.checkoutStatus, CheckoutStatus.Successful)
-    assert.deepEqual(cartModule.f_state.items, [])
-
-    // `ShopAPI#buyProducts()`の呼び出し回数と渡された引数を検証
-    const buyProductsExplain = td.explain(buyProducts)
-    assert.equal(buyProductsExplain.callCount, 1)
-    assert.deepEqual(buyProductsExplain.calls[0].args[0], CART_ITEMS)
-  })
-
-  test('checkout() - エラーケース', async () => {
-    const CART_ITEMS = [ { id: '1', quantity: 1 }, { id: '2', quantity: 1 } ]
-    cartModule.f_state.items = CART_ITEMS
-
-    const buyProducts = td.replace(shopAPI, 'buyProducts')
-    td.when(shopAPI.buyProducts(CART_ITEMS)).thenReject(new Error())
-
-    await cartModule.checkout()
-    assert.equal(cartModule.f_state.checkoutStatus, CheckoutStatus.Failed)
-    assert.deepEqual(cartModule.f_state.items, CART_ITEMS)
-  })
-})
Index: test/store/product-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/store/product-module/index.ts	(revision Local Version)
+++ test/store/product-module/index.ts	(revision Local Version)
@@ -1,64 +0,0 @@
-import * as td from 'testdouble'
-import { Product as APIProduct } from '@/apis'
-import { Product } from '@/store'
-import { TestModule } from '../../types'
-import { newProductModule, ProductState, ProductModuleImpl } from '@/store/product-module'
-
-const assert = chai.assert
-
-suite('store/product-module', () => {
-  const productModule = newProductModule() as ProductModuleImpl & TestModule<ProductState>
-  const shopAPI = productModule.$apis.shop
-
-  const API_PRODUCTS: APIProduct[] = [
-    { id: '1', title: 'iPad 4 Mini', price: 500.01, inventory: 2 },
-    { id: '2', title: 'H&M T-Shirt White', price: 10.99, inventory: 10 },
-    { id: '3', title: 'Charli XCX - Sucker CD', price: 19.99, inventory: 5 },
-  ]
-
-  setup(() => {
-    productModule.f_initState({
-      all: API_PRODUCTS,
-    })
-  })
-
-  teardown(() => {
-    td.reset()
-  })
-
-  test('getProductById() - 取得できるパターン', () => {
-    const stateProduct = productModule.m_getStateProductById('1') as Product
-    const actual = productModule.getProductById(stateProduct.id)
-    assert.deepEqual(actual, stateProduct)
-    // actualとproductが同一オブジェクトでないことを検証
-    // (つまりコピーであることを検証)
-    assert.notEqual(actual, stateProduct)
-  })
-
-  test('getProductById() - 取得できないパターン', () => {
-    const actual = productModule.getProductById('9876')
-    assert.isUndefined(actual)
-  })
-
-  test('decrementProductInventory() - 一般ケース', () => {
-    const stateProduct = productModule.m_getStateProductById('1') as Product
-    const inventoryBk = stateProduct.inventory
-    productModule.decrementProductInventory(stateProduct.id)
-    assert.equal(stateProduct.inventory, inventoryBk - 1)
-  })
-
-  test('decrementProductInventory() - 存在しない商品IDを指定した場合', () => {
-    productModule.decrementProductInventory('9876')
-    // 何も問題は起きない
-    assert(true)
-  })
-
-  test('pullAllProducts()', async () => {
-    const NEW_API_PRODUCTS = [ { id: '1', title: 'product1', price: 101, inventory: 1 }, { id: '2', title: 'product2', price: 102, inventory: 2 } ]
-    td.replace(shopAPI, 'getProducts')
-    td.when(shopAPI.getProducts()).thenResolve(NEW_API_PRODUCTS)
-
-    await productModule.pullAllProducts()
-    assert.deepEqual(productModule.allProducts, NEW_API_PRODUCTS)
-  })
-})
Index: test/types/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/types/index.d.ts	(revision Local Version)
+++ test/types/index.d.ts	(revision Local Version)
@@ -1,7 +0,0 @@
-import { APIs } from '@/apis'
-import { AppStore } from '@/store'
-
-declare interface TestModule<S> {
-  $apis: APIs
-  $appStore: AppStore
-}
Index: test/test.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/test.html	(revision Local Version)
+++ test/test.html	(revision Local Version)
@@ -1,19 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="utf-8" />
-    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
-    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
-    <base href="<%= BASE_URL %>" />
-    <link rel="icon" href="<%= BASE_URL %>favicon.ico" />
-    <title><%= htmlWebpackPlugin.options.title %></title>
-
-    <link href="node_modules/mocha/mocha.css" rel="stylesheet" />
-    <script src="node_modules/mocha/mocha.js"></script>
-    <script src="node_modules/chai/chai.js"></script>
-  </head>
-  <body>
-    <div id="mocha"></div>
-    <!-- built files will be auto injected -->
-  </body>
-</html>
Index: test/test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/test.ts	(revision Local Version)
+++ test/test.ts	(revision Local Version)
@@ -1,17 +0,0 @@
-(async () => {
-  mocha.setup({ ui: 'tdd' })
-
-  const utils = await import('../src/base/utils')
-  const config = await import('../src/base/config')
-  const apis = await import('../src/apis')
-  const store = await import('../src/store')
-
-  utils.initUtils()
-  config.initConfig()
-  apis.initAPI()
-  store.initStore()
-
-  await Promise.all([ import('./api/shop-api'), import('./store/cart-module'), import('./store/product-module') ])
-
-  mocha.run()
-})()
Index: src/store/product-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/product-module/index.ts	(revision Local Version)
+++ src/store/product-module/index.ts	(revision Shelved Version)
@@ -1,80 +1,44 @@
-import { BaseModule } from '@/store/base'
-import { Component } from 'vue-property-decorator'
-import { NoCache } from '@/base/component'
-import { Product, ProductModule } from '@/store/types'
+import { GetterTree, MutationTree, ActionTree } from 'vuex'
+import { ProductModule, ProductState, RootState, Product, ProductTypes } from '../types'
+import { apis } from '@/apis'
 
-export interface ProductState {
-  all: Product[]
-}
+export const productModule = new class implements ProductModule {
+  namespaced = true
 
-@Component
-export class ProductModuleImpl extends BaseModule<ProductState> implements ProductModule {
-  //----------------------------------------------------------------------
-  //
-  //  Constructors
-  //
-  //----------------------------------------------------------------------
-
-  constructor() {
-    super()
-    this.f_initState({
-      all: [],
-    })
+  state: ProductState = {
+    all: [],
   }
 
-  //----------------------------------------------------------------------
-  //
-  //  Properties
-  //
-  //----------------------------------------------------------------------
+  getters: GetterTree<ProductState, RootState> = {
+    [ProductTypes.ALL_PRODUCTS](state): Product[] {
+      return state.all
+    },
 
-  @NoCache
-  get allProducts(): Product[] {
-    return this.$utils.cloneDeep(this.f_state.all)
-  }
-
-  //----------------------------------------------------------------------
-  //
-  //  Lifecycle hooks
-  //
-  //----------------------------------------------------------------------
-
-  created() {}
-
-  //----------------------------------------------------------------------
-  //
-  //  Methods
-  //
-  //----------------------------------------------------------------------
-
-  getProductById(productId: string): Product | undefined {
-    const stateProduct = this.m_getStateProductById(productId)
-    return this.$utils.cloneDeep(stateProduct)
+    [ProductTypes.GET_PRODUCT_BY_ID](state) {
+      return (productId: string) => {
+        const product = state.all.find((item) => item.id === productId)
+        return product
+      }
+    },
   }
 
-  decrementProductInventory(productId: string): void {
-    const stateProduct = this.m_getStateProductById(productId)
-    if (stateProduct) {
-      stateProduct.inventory--
-    }
-  }
-
-  async pullAllProducts(): Promise<void> {
-    const products = await this.$apis.shop.getProducts()
-    this.f_state.all = products
-  }
+  mutations: MutationTree<ProductState> = {
+    [ProductTypes.SET_PRODUCTS](state, products: Product[]): void {
+      state.all = products
+    },
 
-  //----------------------------------------------------------------------
-  //
-  //  Internal methods
-  //
-  //----------------------------------------------------------------------
-
-  m_getStateProductById(productId: string): Product | undefined {
-    return this.f_state.all.find((item) => item.id === productId)
-  }
-}
+    [ProductTypes.DECREMENT_PRODUCT_INVENTORY](state, productId: string): void {
+      const product = state.all.find((item) => item.id === productId)
+      if (product) {
+        product.inventory--
+      }
+    },
+  }
 
-export function newProductModule(): ProductModule {
-  return new ProductModuleImpl()
-}
+  actions: ActionTree<ProductState, RootState> = {
+    async [ProductTypes.PULL_ALL_PRODUCTS](context): Promise<void> {
+      const products = await apis.shop.getProducts()
+      context.commit(ProductTypes.SET_PRODUCTS, products)
+    },
+  }
+}()
Index: src/views/shopping-view/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/views/shopping-view/index.vue	(revision Local Version)
+++ src/views/shopping-view/index.vue	(revision Shelved Version)
@@ -36,7 +36,7 @@
         <div class="title-text">{{ $t('products') }}</div>
       </div>
       <hr style="width: 100%;" />
-      <div v-for="(product) in $appStore.product.allProducts" :key="product.id" class="layout horizontal center product-item">
+      <div v-for="(product) in m_allProducts" :key="product.id" class="layout horizontal center product-item">
         <div class="layout vertical center-justified">
           <div class="title">{{ product.title }}</div>
           <div class="detail">
@@ -55,7 +55,7 @@
         <div class="flex"></div>
       </div>
       <hr style="width: 100%;" />
-      <div v-for="(cartItem) in $appStore.cart.cartItems" :key="cartItem.id" class="layout horizontal center cart-item">
+      <div v-for="(cartItem) in m_cartItems" :key="cartItem.id" class="layout horizontal center cart-item">
         <div class="layout vertical center-justified">
           <div class="title">{{ cartItem.title }}</div>
           <div class="detail">
@@ -64,8 +64,8 @@
         </div>
       </div>
       <div class="layout horizontal center">
-        <div class="flex error-text">{{ m_checkoutStatus.message }}</div>
-        <paper-button v-show="!m_cartIsEmpty" class="checkout-button" @click="m_checkoutButtonOnClick">{{ $t('checkout') }}</paper-button>
+        <div class="flex error-text">{{ m_status.message }}</div>
+        <paper-button v-show="!m_cartIsEmpty" class="checkout-button" @click="m_checkout">{{ $t('checkout') }}</paper-button>
       </div>
     </div>
   </div>
@@ -77,12 +77,35 @@
 import '@polymer/paper-icon-button/paper-icon-button'
 
 import { BaseComponent } from '@/base/component'
-import { CartItem, CheckoutStatus, Product } from '@/store'
 import { Component } from 'vue-property-decorator'
 import { mixins } from 'vue-class-component'
 
+import { namespace } from 'vuex-class'
+import { CartTypes, CheckoutStatus, Product, ProductTypes } from '@/store'
+
+const productModule = namespace(ProductTypes.PATH)
+const cartModule = namespace(CartTypes.PATH)
+
 @Component
 export default class ShoppingView extends mixins(BaseComponent) {
+  //----------------------------------------------------------------------
+  //
+  //  Store
+  //
+  //----------------------------------------------------------------------
+
+  @productModule.Getter(ProductTypes.ALL_PRODUCTS) m_allProducts!: ProductTypes.allProducts
+
+  @productModule.Action(ProductTypes.PULL_ALL_PRODUCTS) m_pullAllProducts!: ProductTypes.pullAllProducts
+
+  @cartModule.Getter(CartTypes.CART_ITEMS) m_cartItems!: CartTypes.cartItems
+
+  @cartModule.Getter(CartTypes.CHECKOUT_STATUS) m_checkoutStatus!: CartTypes.checkoutStatus
+
+  @cartModule.Action(CartTypes.ADD_PRODUCT_TO_CART) m_addProductToCart!: CartTypes.addProductToCart
+
+  @cartModule.Action(CartTypes.CHECKOUT) m_checkout!: CartTypes.checkout
+
   //----------------------------------------------------------------------
   //
   //  Variables
@@ -90,11 +113,11 @@
   //----------------------------------------------------------------------
 
   get m_cartIsEmpty(): boolean {
-    return this.$appStore.cart.cartItems.length === 0
+    return this.m_cartItems.length === 0
   }
 
-  get m_checkoutStatus(): { result: boolean, message: string } {
-    const checkoutStatus = this.$appStore.cart.checkoutStatus
+  get m_status(): { result: boolean, message: string } {
+    const checkoutStatus = this.m_checkoutStatus
     const result = checkoutStatus === CheckoutStatus.None || checkoutStatus === CheckoutStatus.Successful
     return {
       result,
@@ -109,7 +132,7 @@
   //----------------------------------------------------------------------
 
   async created() {
-    await this.$appStore.product.pullAllProducts()
+    await this.m_pullAllProducts()
   }
 
   //----------------------------------------------------------------------
@@ -118,12 +141,12 @@
   //
   //----------------------------------------------------------------------
 
-  m_addButtonOnClick(product: Product): void {
-    this.$appStore.cart.addProductToCart(product.id)
+  async m_addButtonOnClick(product: Product): Promise<void> {
+    await this.m_addProductToCart(product.id)
   }
 
   async m_checkoutButtonOnClick(): Promise<void> {
-    await this.$appStore.cart.checkout()
+    await this.m_checkout()
   }
 }
 </script>
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision Local Version)
+++ package.json	(revision Shelved Version)
@@ -36,7 +36,9 @@
     "vue-class-component": "^6.3.2",
     "vue-i18n": "^8.4.0",
     "vue-property-decorator": "^7.2.0",
-    "vue-router": "^3.0.2"
+    "vue-router": "^3.0.2",
+    "vuex": "^3.0.1",
+    "vuex-class": "^0.3.1"
   },
   "devDependencies": {
     "@kazupon/vue-i18n-loader": "^0.3.0",
Index: src/types/vue.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/types/vue.d.ts	(revision Local Version)
+++ src/types/vue.d.ts	(revision Shelved Version)
@@ -1,12 +1,10 @@
 import 'vue'
 import { Config } from '@/base/config'
 import { Utils } from '@/base/utils'
-import { AppStore } from '@/store'
 
 declare module 'vue/types/vue' {
   interface Vue {
     $config: Config
     $utils: Utils
-    $appStore: AppStore
   }
 }
Index: src/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/index.ts	(revision Local Version)
+++ src/index.ts	(revision Shelved Version)
@@ -9,20 +9,19 @@
 import { initAPI } from '@/apis'
 import { initConfig } from '@/base/config'
 import { initServiceWorker } from '@/base/service-worker'
-import { initStore } from '@/store'
+import { store } from '@/store'
 import { initUtils } from '@/base/utils'
 import { router } from '@/base/router'
 
 // TODO JetBrainsIDE使用時の開発補助コード
-// import '@/views/abc-view/index.vue'
-// import '@/views/shopping-view/index.vue'
+import '@/views/abc-view/index.vue'
+import '@/views/shopping-view/index.vue'
 
 (async () => {
   initUtils()
   initConfig()
   initServiceWorker()
   initAPI()
-  initStore()
   await initI18n()
 
   Vue.filter('currency', currency)
@@ -32,5 +31,6 @@
     router,
     render: (h) => h(AppView),
     i18n,
+    store,
   })
 })()
Index: src/store/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/index.ts	(revision Local Version)
+++ src/store/index.ts	(revision Shelved Version)
@@ -1,40 +1,18 @@
 import Vue from 'vue'
-import { newCartModule } from '@/store/cart-module'
-import { newProductModule } from '@/store/product-module'
-import { AppStore, CartModule, ProductModule } from '@/store/types'
-import { Component } from 'vue-property-decorator'
-
-const debug = process.env.NODE_ENV !== 'production'
-
-@Component
-class AppStoreImpl extends Vue implements AppStore {
-  constructor() {
-    super()
-    this.m_product = newProductModule()
-    this.m_cart = newCartModule({ product: this.product })
-  }
-
-  m_product: ProductModule
-
-  get product(): ProductModule {
-    return this.m_product
-  }
+import Vuex, { StoreOptions } from 'vuex'
+import { CartTypes, CounterTypes, ProductTypes, RootState } from './types'
+import { cartModule } from './cart-module'
+import { counterModule } from './counter-module'
+import { productModule } from './product-module'
 
-  m_cart: CartModule
+Vue.use(Vuex)
 
-  get cart(): CartModule {
-    return this.m_cart
-  }
-}
+export const store = new Vuex.Store<RootState>({
+  modules: {
+    [ProductTypes.PATH]: productModule,
+    [CartTypes.PATH]: cartModule,
+    [CounterTypes.PATH]: counterModule,
+  },
+} as StoreOptions<RootState>)
 
-export let appStore: AppStore
-
-export function initStore(): void {
-  appStore = new AppStoreImpl()
-  Object.defineProperty(Vue.prototype, '$appStore', {
-    value: appStore,
-    writable: false,
-  })
-}
-
-export * from '@/store/types'
+export * from './types'
Index: src/views/abc-view/index.vue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/views/abc-view/index.vue	(revision Local Version)
+++ src/views/abc-view/index.vue	(revision Shelved Version)
@@ -58,7 +58,10 @@
           <span class="title">checked: </span><span class="value">{{ m_customChecked }}</span>
         </span>
       </div>
-      <div class="layout horizontal end-justified"><paper-button raised @click="m_sleepButtonOnClick">Sleep</paper-button></div>
+      <div class="layout horizontal end-justified">
+        <paper-button raised @click="m_incrementButtonOnClick">Increment</paper-button>
+        <paper-button raised @click="m_sleepButtonOnClick">Sleep</paper-button>
+      </div>
     </paper-card>
   </div>
 </template>
@@ -75,11 +78,16 @@
 import { Component, Prop, Watch } from 'vue-property-decorator'
 import { mixins } from 'vue-class-component'
 
+import { namespace } from 'vuex-class'
+import { CounterTypes } from '@/store'
+
 interface Post {
   message: string
   times: number
 }
 
+const counterModule = namespace(CounterTypes.PATH)
+
 @Component({
   components: {
     'greet-message': GreetMessage,
@@ -88,6 +96,14 @@
   },
 })
 export default class AbcView extends mixins(BaseComponent) {
+  //--------------------------------------------------
+  //  store
+  //--------------------------------------------------
+
+  @counterModule.Getter('current') current!: CounterTypes.current;
+
+  @counterModule.Mutation('increment') increment!: CounterTypes.increment;
+
   //--------------------------------------------------
   //  props
   //--------------------------------------------------
@@ -199,6 +215,11 @@
     alert(await this.m_sleep(2000))
   }
 
+  async m_incrementButtonOnClick() {
+    this.increment()
+    console.log(this.current)
+  }
+
   //--------------------------------------------------
   //  elements
   //--------------------------------------------------
Index: src/store/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/types.ts	(revision Local Version)
+++ src/store/types.ts	(revision Shelved Version)
@@ -1,4 +1,30 @@
-import { Product as APIProduct } from '@/apis'
+import { Module } from 'vuex'
+import { Product as APIProduct } from '../apis'
+
+//----------------------------------------------------------------------
+//
+//  States
+//
+//----------------------------------------------------------------------
+
+export interface RootState {
+  counter: CounterModule
+  product: ProductModule
+  cart: CartModule
+}
+
+export interface ProductState {
+  all: Product[]
+}
+
+export interface CartState {
+  items: Array<{ id: string, quantity: number }>
+  checkoutStatus: CheckoutStatus
+}
+
+export interface CounterState {
+  counter: number
+}
 
 //----------------------------------------------------------------------
 //
@@ -6,34 +32,84 @@
 //
 //----------------------------------------------------------------------
 
-export interface AppStore {
-  readonly product: ProductModule
+export interface ProductModule extends Module<ProductState, RootState> {}
+
+export interface CartModule extends Module<CartState, RootState> {}
+
+export interface CounterModule extends Module<CounterState, RootState> {}
+
+//----------------------------------------------------------------------
+//
+//  Types
+//
+//----------------------------------------------------------------------
+
+export namespace CounterTypes {
+  export const PATH = 'counter'
+
+  export type current = number
 
-  readonly cart: CartModule
+  export type increment = () => void
 }
 
-export interface ProductModule {
-  readonly allProducts: Product[]
+export namespace ProductTypes {
+  export const PATH = 'product'
+
+  export const ALL_PRODUCTS = 'allProducts'
+
+  export type allProducts = Product[]
+
+  export const GET_PRODUCT_BY_ID = 'getProductById'
+
+  export type getProductById = (productId: string) => Product | undefined
+
+  export const PULL_ALL_PRODUCTS = 'pullAllProducts'
 
-  getProductById(productId: string): Product | undefined
+  export type pullAllProducts = () => Promise<void>
 
-  decrementProductInventory(productId: string): void
+  export const SET_PRODUCTS = 'setProducts'
 
-  pullAllProducts(): Promise<void>
+  export type setProducts = (products: Product[]) => void
+
+  export const DECREMENT_PRODUCT_INVENTORY = 'decrementProductInventory'
+
+  export type decrementProductInventory = (productId: string) => void
 }
 
-export interface CartModule {
-  readonly checkoutStatus: CheckoutStatus
+export namespace CartTypes {
+  export const PATH = 'cart'
 
-  readonly cartItems: CartItem[]
+  export const CHECKOUT_STATUS = 'checkoutStatus'
 
-  readonly cartTotalPrice: number
+  export type checkoutStatus = CheckoutStatus
 
-  getCartItemById(productId: string): CartItem | undefined
+  export const CART_ITEMS = 'cartItems'
 
-  checkout(): Promise<void>
+  export type cartItems = CartItem[]
 
-  addProductToCart(productId: string): void
+  export const CART_TOTAL_PRICE = 'cartTotalPrice'
+
+  export type cartTotalPrice = number
+
+  export const GET_CART_ITEM_BY_ID = 'getCartItemById'
+
+  export type getCartItemById = (productId: string) => CartItem | undefined
+
+  export const CHECKOUT = 'checkout'
+
+  export type checkout = () => Promise<void>
+
+  export const ADD_PRODUCT_TO_CART = 'addProductToCart'
+
+  export type addProductToCart = (productId: string) => Promise<void>
+
+  export const m_SET_CART_ITEMS = 'm_setCartItems'
+
+  export const m_SET_CHECKOUT_STATUS = 'm_setCheckoutStatus'
+
+  export const m_PUSH_PRODUCT_TO_CART = 'm_pushProductToCart'
+
+  export const m_INCREMENT_ITEM_QUANTITY = 'm_incrementItemQuantity'
 }
 
 //----------------------------------------------------------------------
Index: vue.config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vue.config.js	(revision Local Version)
+++ vue.config.js	(revision Shelved Version)
@@ -19,12 +19,6 @@
 }
 if (process.env.VUE_APP_IS_DEVELOPMENT === 'true') {
   Object.assign(pages, {
-    test: {
-      entry: 'test/test.ts',
-      template: 'test/test.html',
-      filename: 'test.html',
-      title: 'Vue WWW Base Unit Test',
-    },
     playground: {
       entry: 'src/playground.ts',
       template: 'src/playground.html',
Index: src/store/cart-module/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/store/cart-module/index.ts	(revision Local Version)
+++ src/store/cart-module/index.ts	(revision Shelved Version)
@@ -1,155 +1,118 @@
-import { BaseModule } from '@/store/base'
-import { CartModule, CartItem, CheckoutStatus, Product, ProductModule } from '@/store/types'
-import { Component } from 'vue-property-decorator'
-import { NoCache } from '@/base/component'
-
-export interface CartState {
-  items: Array<{ id: string, quantity: number }>
-  checkoutStatus: CheckoutStatus
-}
+import { CartModule, CartState, RootState, CartItem, CartTypes, CheckoutStatus, Product, ProductState, ProductTypes } from '../types'
+import { GetterTree, MutationTree, ActionTree } from 'vuex'
+import { apis } from '@/apis'
 
-interface CartModuleDependencies {
-  product: ProductModule
-}
+export const cartModule = new class implements CartModule {
+  namespaced = true
 
-@Component
-export class CartModuleImpl extends BaseModule<CartState> implements CartModule {
-  //----------------------------------------------------------------------
-  //
-  //  Constructors
-  //
-  //----------------------------------------------------------------------
-
-  constructor() {
-    super()
-    this.f_initState({
-      items: [],
-      checkoutStatus: CheckoutStatus.None,
-    })
+  state: CartState = {
+    items: [],
+    checkoutStatus: CheckoutStatus.None,
   }
 
-  //----------------------------------------------------------------------
-  //
-  //  Variables
-  //
-  //----------------------------------------------------------------------
-
-  m_dependencies!: CartModuleDependencies;
-
-  //----------------------------------------------------------------------
-  //
-  //  Properties
-  //
-  //----------------------------------------------------------------------
-
-  get checkoutStatus(): CheckoutStatus {
-    return this.f_state.checkoutStatus
-  }
+  getters: GetterTree<CartState, RootState> = {
+    [CartTypes.CHECKOUT_STATUS](state): CheckoutStatus {
+      return state.checkoutStatus
+    },
 
-  @NoCache
-  get cartItems(): CartItem[] {
-    const allProducts = this.m_dependencies.product.allProducts
-    return this.f_state.items.map(({ id, quantity }) => {
-      const product = allProducts.find((item) => item.id === id)!
-      return {
-        id: product.id,
-        title: product.title,
-        price: product.price,
-        quantity,
-      }
-    })
-  }
+    [CartTypes.CART_ITEMS](state, getters, rootState): CartItem[] {
+      const allProducts = (rootState.product as ProductState).all
+      return state.items.map(({ id, quantity }) => {
+        const product = allProducts.find((item) => item.id === id)!
+        return {
+          id: product.id,
+          title: product.title,
+          price: product.price,
+          quantity,
+        }
+      })
+    },
 
-  get cartTotalPrice(): number {
-    return this.cartItems.reduce((total, product) => {
-      return total + product.price * product.quantity
-    }, 0)
-  }
-
-  //----------------------------------------------------------------------
-  //
-  //  Methods
-  //
-  //----------------------------------------------------------------------
+    [CartTypes.CART_TOTAL_PRICE](state, getters): number {
+      const cartItems = getters[CartTypes.CART_ITEMS] as CartItem[]
+      return cartItems.reduce((total, product) => {
+        return total + product.price * product.quantity
+      }, 0)
+    },
 
-  init(dependencies: CartModuleDependencies): void {
-    this.m_dependencies = dependencies
-  }
-
-  getCartItemById(productId: string): CartItem | undefined {
-    const product = this.m_getProductById(productId)
-    const cartItem = this.f_state.items.find((item) => {
-      return item.id === productId
-    })
-    if (!cartItem) return undefined
-    return {
-      id: cartItem.id,
-      title: product.title,
-      price: product.price,
-      quantity: cartItem.quantity,
-    }
+    [CartTypes.GET_CART_ITEM_BY_ID](state, getters, rootState, rootGetters): (productId: string) => CartItem | undefined {
+      return (productId: string) => {
+        const product = getProductById(rootGetters, productId)
+        const cartItem = state.items.find((item) => {
+          return item.id === productId
+        })
+        if (!cartItem) return undefined
+        return {
+          id: cartItem.id,
+          title: product.title,
+          price: product.price,
+          quantity: cartItem.quantity,
+        } as CartItem
+      }
+    },
   }
+
+  mutations: MutationTree<CartState> = {
+    [CartTypes.m_SET_CART_ITEMS](state, items: Array<{ id: string, quantity: number }>) {
+      state.items = items
+    },
+
+    [CartTypes.m_SET_CHECKOUT_STATUS](state, status: CheckoutStatus) {
+      state.checkoutStatus = status
+    },
+
+    [CartTypes.m_PUSH_PRODUCT_TO_CART](state, productId: string) {
+      state.items.push({
+        id: productId,
+        quantity: 1,
+      })
+    },
+
+    [CartTypes.m_INCREMENT_ITEM_QUANTITY](state, productId: string) {
+      const cartItem = state.items.find((item) => item.id === productId)
+      if (cartItem) {
+        cartItem.quantity++
+      }
+    },
+  }
 
-  addProductToCart(productId: string): void {
-    const product = this.m_getProductById(productId)
-    this.f_state.checkoutStatus = CheckoutStatus.None
-    if (product.inventory > 0) {
-      const cartItem = this.f_state.items.find((item) => item.id === product.id)
-      if (!cartItem) {
-        this.m_pushProductToCart(product.id)
-      } else {
-        this.m_incrementItemQuantity(cartItem.id)
-      }
-      // 在庫を1つ減らす
-      this.m_dependencies.product.decrementProductInventory(product.id)
-    }
-  }
+  actions: ActionTree<CartState, RootState> = {
+    async [CartTypes.ADD_PRODUCT_TO_CART](context, productId: string): Promise<void> {
+      context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.None)
+      const product = getProductById(context.rootGetters, productId)
+      if (product.inventory > 0) {
+        const cartItem = context.state.items.find((item) => item.id === product.id)
+        if (!cartItem) {
+          context.commit(CartTypes.m_PUSH_PRODUCT_TO_CART, product.id)
+        } else {
+          context.commit(CartTypes.m_INCREMENT_ITEM_QUANTITY, product.id)
+        }
+        // 在庫を1つ減らす
+        context.commit(`${ProductTypes.PATH}/${ProductTypes.DECREMENT_PRODUCT_INVENTORY}`, productId, { root: true })
+      }
+    },
 
-  async checkout(): Promise<void> {
-    const savedCartItems = [ ...this.f_state.items ]
-    this.f_state.checkoutStatus = CheckoutStatus.None
-    try {
-      await this.$apis.shop.buyProducts(this.f_state.items)
-      this.f_state.items = [] // カートを空にする
-      this.f_state.checkoutStatus = CheckoutStatus.Successful
-    } catch (err) {
-      this.f_state.checkoutStatus = CheckoutStatus.Failed
-      // カートの内容をAPIリクエス前の状態にロールバックする
-      this.f_state.items = savedCartItems
-    }
+    async [CartTypes.CHECKOUT](context): Promise<void> {
+      const cartProducts = [ ...context.state.items ]
+      context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.None)
+      try {
+        await apis.shop.buyProducts(cartProducts)
+        context.commit(CartTypes.m_SET_CART_ITEMS, []) // カートを空にする
+        context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.Successful)
+      } catch (err) {
+        // カートの内容をAPIリクエス前の状態にロールバックする
+        context.commit(CartTypes.m_SET_CART_ITEMS, cartProducts)
+        context.commit(CartTypes.m_SET_CHECKOUT_STATUS, CheckoutStatus.Failed)
+      }
+    },
   }
-
-  //----------------------------------------------------------------------
-  //
-  //  Internal methods
-  //
-  //----------------------------------------------------------------------
-
-  m_pushProductToCart(productId: string): void {
-    this.f_state.items.push({
-      id: productId,
-      quantity: 1,
-    })
-  }
-
-  m_incrementItemQuantity(productId: string): void {
-    const cartItem = this.f_state.items.find((item) => item.id === productId)
-    if (cartItem) {
-      cartItem.quantity++
-    }
-  }
+}()
 
-  m_getProductById(productId: string): Product {
-    const result = this.m_dependencies.product.getProductById(productId)
-    if (!result) {
-      throw new Error(`A product that matches the specified productId "${productId}" was not found.`)
-    }
-    return result
+function getProductById(rootGetters: any, productId: string): Product {
+  const path = `${ProductTypes.PATH}/${ProductTypes.GET_PRODUCT_BY_ID}`
+  const result = rootGetters[path](productId) as Product | undefined
+  if (!result) {
+    throw new Error(`A Product that matches the specified productId "${productId}" was not found.`)
   }
-}
-
-export function newCartModule(dependencies: CartModuleDependencies): CartModule {
-  const result = new CartModuleImpl()
-  result.init(dependencies)
   return result
 }
